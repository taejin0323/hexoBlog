<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ATTACK ON NUNU</title>
  
  <subtitle>STUDY BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://taejin0323.github.io/"/>
  <updated>2019-07-12T06:34:57.585Z</updated>
  <id>http://taejin0323.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01 HELLO, PYTHON!</title>
    <link href="http://taejin0323.github.io/2019/07/12/01-hello-python/"/>
    <id>http://taejin0323.github.io/2019/07/12/01-hello-python/</id>
    <published>2019-07-12T05:11:51.000Z</published>
    <updated>2019-07-12T06:34:57.585Z</updated>
    
    <content type="html"><![CDATA[<h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li>Kaggle 홈페이지 - <a href="https://www.kaggle.com" target="_blank" rel="noopener">Kaggle</a></li><li>1강 ‘Hello, Python’ - <a href="https://www.kaggle.com/colinmorris/hello-python" target="_blank" rel="noopener">Python Micro-Course Home Page</a></li></ul><hr><p>📖 <strong>목차</strong> 📖</p><ul><li><a href="#intro">Intro</a></li><li><a href="#hello-python">Hello, Python!</a></li><li><a href="#your-turn">Your Turn</a></li></ul><hr><h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h3><p>Data Science에 필요한 Python의 핵심적인 부분들을 배우는 과정입니다. 본 과정은 기초적인 코딩 경험이나 지식이 있는 사람들을 대상으로 작성되었습니다. (만약 코딩에 익숙하지 않으시다면  “<a href="https://wiki.python.org/moin/BeginnersGuide/NonProgrammers" target="_blank" rel="noopener">Python for Non-Programmers</a>” 해당 문서를 참고하는 것을 권장합니다)</p><p>우선, Python의 구문(syntax), 변수 할당(variable assignment), 산술 연산자(arithmetic operators)에 대해 가볍게 다루어 보겠습니다. 만약 Python에 경험이 있으시면 바로 연습문제(<a href="https://www.kaggle.com/kernels/fork/1275163" target="_blank" rel="noopener">exercise with Kaggle Kernal</a>)로 넘어가셔도 됩니다.</p><h3 id="hello-python"><a class="markdownIt-Anchor" href="#hello-python"></a> Hello, Python!</h3><p><strong>Python</strong> 은 영국의 코미디 그룹 <a href="https://en.wikipedia.org/wiki/Monty_Python" target="_blank" rel="noopener">몬티 파이선(Monty Python)</a>에서 그 이름을 가져왔습니다. 그들에게 존경을 표하며 우리의 첫 python 프로그램을 스팸(spam)에 관한 그들의 코미디 스케치(skit)를 만들어 볼까요?<br><code>몬티 파이선의 코미디 스케치 25화 7분 50초부터 해당 에피소드가 등장한다고 합니다</code> - <a href="https://www.youtube.com/watch?v=zLih-WQwBSc" target="_blank" rel="noopener">youtube 영상</a></p><p>그저 재미로, 아래의 코드를 읽어보시고 어떻게 실행 될지 예상해 보세요.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spam_amout = <span class="number">0</span></span><br><span class="line">print(spam_amout)</span><br><span class="line"></span><br><span class="line"><span class="comment">#스팸, 계란, 스팸, 스팸, 베이컨과 스팸 주문</span></span><br><span class="line">spam_amout = spam_amout + <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> spam_amount &gt;<span class="number">0</span>:</span><br><span class="line">  print(<span class="string">"But I don't want ANY spam!"</span>)</span><br><span class="line"></span><br><span class="line">viking_song = <span class="string">"Spam "</span> * spam_amount</span><br><span class="line">print(viking_song)</span><br></pre></td></tr></table></figure><p>결과는 아래와 같습니다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">But I don&apos;t want ANY spam!</span><br><span class="line">Spam Spam Spam Spam</span><br></pre></td></tr></table></figure><p>자, 이제 하나하나 분석해보겠습니다. 이 간단한 프로그램은  파이썬 코드가 어떻게 생겼는지, 어떻게 동작하는지를 여러 중요한 측면들을 통해 보여줍니다. 위에서 부터 순서대로 살펴보겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam_amount = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="your-turn"><a class="markdownIt-Anchor" href="#your-turn"></a> Your Turn</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;reference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reference&quot;&gt;&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kaggle 홈페이지 - &lt;a href=&quot;https://www.kaggle.com
      
    
    </summary>
    
      <category term="LANGUAGE" scheme="http://taejin0323.github.io/categories/LANGUAGE/"/>
    
      <category term="PYTHON" scheme="http://taejin0323.github.io/categories/LANGUAGE/PYTHON/"/>
    
    
      <category term="python" scheme="http://taejin0323.github.io/tags/python/"/>
    
      <category term="language" scheme="http://taejin0323.github.io/tags/language/"/>
    
      <category term="파이썬" scheme="http://taejin0323.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"/>
    
      <category term="언어" scheme="http://taejin0323.github.io/tags/%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>데이터망 - 데이터통신 개요</title>
    <link href="http://taejin0323.github.io/2019/03/07/networking-01/"/>
    <id>http://taejin0323.github.io/2019/03/07/networking-01/</id>
    <published>2019-03-07T07:02:57.000Z</published>
    <updated>2019-03-07T08:24:35.748Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>김재수 교수님, 컴퓨터망(Data Communications and Networking) 수업 내용<br>수업 복습 겸 ppt 내용 정리</p></blockquote><h3 id="수업-목표"><a class="markdownIt-Anchor" href="#수업-목표"></a> 수업 목표</h3><ul><li>데이터 통신과 컴퓨터 통신에 대한 기본 원리 및 구조, 표준을 이해</li><li>컴퓨터 네트워크와 관련된 기술과 개념을 이해</li></ul><blockquote><p>교수님 曰 : Data transmission(communication) 에서 제일 중요한 것은 protocol 이다!</p></blockquote><h1 id="span-stylecolorbluechapter-1span-introduction개요"><a class="markdownIt-Anchor" href="#span-stylecolorbluechapter-1span-introduction개요"></a> <span style="color:blue">Chapter 1</span> Introduction(개요)</h1><p>📖 Index 📖</p><p>1.1 <a href="#11-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%86%B5%EC%8B%A0">데이터 통신</a></p><p>1.2 <a href="#12-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC">네트워크</a></p><p>1.3 <a href="#13-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9C%A0%ED%98%95">네트워크 유형</a></p><h2 id="11-데이터-통신"><a class="markdownIt-Anchor" href="#11-데이터-통신"></a> 1.1 데이터 통신</h2><p><strong>데이터 통신(Data communication)</strong> 은 전선과 같은 통신 매체를 통하여 두 장치간에 데이터를 교환하는 것<br>데이터(data) : 데이터를 만들어 사용하는 사용자 간에 합의된 형태로 표현된 정보</p><p>​      <strong>기본 특성</strong></p><ul><li>delivery - 올바른 목적지, 원하는 장치나 사용자에게 전달</li><li>accuracy - 요류, 손실 없이 정확하게 데이터를 전달</li><li>timeliness - 적정 시간 내에 데이터를 전달</li><li>jitter(파형 난조) - 패킷의 도착 시간이 서로 차이가 나서 품질(quality)이 일정치 못함</li></ul><blockquote><p>DATJi(닷지)…???ㅋㅋ</p></blockquote><h3 id="111-데이터-통신-구성-요소"><a class="markdownIt-Anchor" href="#111-데이터-통신-구성-요소"></a> 1.1.1 데이터 통신 구성 요소</h3><img align="middle" src="http://www.myreadingroom.co.in/images/stories/docs/dcn/Components%20of%20Data%20Communication.jpg"><p><strong>5개의 구성 요소</strong> 가 있다</p><ul><li><span style="color:green">메세지(Message)</span><br>– 통신의 대상이 되는 정보(데이터)<br>ex) text, number, image, audio, video</li><li><span style="color:green">송신자(Sender)</span><br>– 데이터 메시지를 보내는 장치<br>ex) computer, telephone, camera</li><li><span style="color:green">수신자(Receiver)</span><br>– 메시지를 받는 장치<br>ex) computer, telephone, television</li><li><span style="color:green">전송매체(Medium)</span><br>– sender부터 receiver까지 이동하는 물리적인 경로<br>ex) twisted pair wire, coaxial cable, fiber-optic cable, laser, wireless wave</li><li><span style="color:green">프로토콜(Protocol)</span><br>– 통신하는 기기간의 약속(통신 규약)</li></ul><h3 id="112-데이터-표현"><a class="markdownIt-Anchor" href="#112-데이터-표현"></a> 1.1.2 데이터 표현</h3><ul><li>Text -&gt; Bit Pattern</li><li>Number -&gt; Bit Pattern</li><li>Image -&gt; Pixel, Resolution</li><li>Audio -&gt; 연속 신호</li><li>Video -&gt; 연속적인 개체 또는 여러 화상의 조합</li></ul><h3 id="113-데이터-흐름-방향"><a class="markdownIt-Anchor" href="#113-데이터-흐름-방향"></a> 1.1.3 데이터 흐름 방향</h3><img align="center" src="http://www.opentextbooks.org.hk/system/files/resource/10/10132/10137/media/ct332_01.gif"><p>a. <span style="color:blue">Simplex</span></p><ul><li>한쪽 방향으로만 통신 가능</li><li><span style="color:red"> Keyboard, Monitor, Radio, TV</span></li></ul><p>b. <span style="color:blue">Half-duplex</span></p><ul><li>양 방향 송신 가능하지만 <strong>동시에</strong> 송신 불가</li><li><span style="color:red"> Walkie-talkie(무전기)</span></li></ul><p>c. <span style="color:blue">Full-duplex</span></p><ul><li>양 방향 송/수신 가능(2차선 도로와 같음)</li><li><span style="color:red">Telephone, Internet</span></li></ul><hr><h2 id="12-네트워크"><a class="markdownIt-Anchor" href="#12-네트워크"></a> 1.2 네트워크</h2><p><strong>통신 링크에 서로 연결된 장치(Node)의 모임</strong><br>The interconnection of a set of devices capable of communication</p><h3 id="121-네트워크-성능-평가"><a class="markdownIt-Anchor" href="#121-네트워크-성능-평가"></a> 1.2.1 <s>네트워크 성능 평가</s></h3><p>생략</p><h3 id="122-물리적-구조physical-structures-연결-방식"><a class="markdownIt-Anchor" href="#122-물리적-구조physical-structures-연결-방식"></a> 1.2.2 물리적 구조(Physical Structures) : 연결 방식</h3><img align="center" src="https://systemzone.net/wp-content/uploads/2017/09/network-topology.png"><p><strong>Physical Topology</strong> : 네트워크가 물리적으로 어떻게 구성 되었는가<br>(하이브리드 토폴로지 같은 것은 제외하고 기본적인 종류만 다룬다)</p><ul><li>Point-to-point- 기본적인 연결</li><li>Multipoint- tree와 같은 것 아닐까??</li><li><span style="color:red">Mesh</span></li><li><span style="color:red">Star</span></li><li><span style="color:red">Bus</span></li><li><span style="color:red">Ring</span></li></ul><h2 id="13-네트워크-유형"><a class="markdownIt-Anchor" href="#13-네트워크-유형"></a> 1.3 네트워크 유형</h2><img align="center" src="https://www.researchgate.net/profile/Viet_Hung_Nguyen3/publication/225349001/figure/fig1/AS:302593634648075@1449155352384/Global-view-of-metropolitan-area-network.png"><ul><li><p><span style="color:blue">Local-area Network</span> <strong>LAN</strong><br>개인(기관)이 소유함 : Office, Building, Campus<br>단순히 2개만 연결하는 것에서 부터, 여러 대 까지 확장이 가능<br>각각의 host는 <strong>identifier와 address</strong>를 가지고 있다<br>과거에는 bus type으로 구성했다면, 현대에는 switch를 사용해서 star type으로 구성한다!</p></li><li><p><span style="color:blue">Metropolitan-area Network</span> <strong>MAN</strong><br>우리나라에 해당 없으니 생략</p></li><li><p><span style="color:blue">Wide-area Network</span> <strong>WAN</strong><br>아주 넓은 지역의 네트워크 : town, state, country, the world<br>communicational organization이 소유<br>Point-to-point WAN, Switched WAN</p></li></ul><h3 id="133-스위칭switching"><a class="markdownIt-Anchor" href="#133-스위칭switching"></a> 1.3.3 스위칭(Switching)</h3><p><strong>2개 이상의 입력 단자와 출력 단자를 연결시켜 주는 기능</strong></p><img src="https://www.thecrazyprogrammer.com/wp-content/uploads/2018/01/Difference-between-Circuit-Switching-and-Packet-Switching.gif"><ul><li><p><span style="color:red">회선교환망(Circuit Switched Network)</span> - 음성 전화<br>dedicated connection(전용으로 할당) 을 circuit 이라고 한다<br>과거에는 <em>Telephone network</em> 라고 했다</p><p>(지금 telephone network는 packet switching의 일부)<br>활성화 비활성화만 할 수 있다</p></li><li><p><span style="color:red">패킷 교환망(Packet Switched Network)</span> - 인터넷<br>blocks of data 로 이루어진 packets 라고 한다<br>switches fuction의 <em>storing</em> 과 <em>forwarding</em> 을 사용해서 데이터를 주고 받음<br>즉, 저장했다 보내는 것</p></li></ul><h3 id="134-인터넷"><a class="markdownIt-Anchor" href="#134-인터넷"></a> 1.3.4 인터넷</h3><p><span style="color: red">Internet Service Provider(ISP) </span> : LG, KT, SK 같은 인터넷을 제공해 주는 곳</p><p>주로 물리적인 연결 방법으로 point-to-point WAN 방식을 사용한다</p><h2 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h2><ul><li>Data Communication<br>Components, Data Type, Data Flow</li><li>Network Topology<br>Mesh, Star, Bus, Ring</li><li>The Configuration of Internet</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;김재수 교수님, 컴퓨터망(Data Communications and Networking) 수업 내용&lt;br&gt;
수업 복습 겸 ppt 내용 정리&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;수업-목표&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
      <category term="STUDY" scheme="http://taejin0323.github.io/categories/STUDY/"/>
    
      <category term="컴퓨터망" scheme="http://taejin0323.github.io/categories/STUDY/%EC%BB%B4%ED%93%A8%ED%84%B0%EB%A7%9D/"/>
    
    
      <category term="networking" scheme="http://taejin0323.github.io/tags/networking/"/>
    
      <category term="컴퓨터망" scheme="http://taejin0323.github.io/tags/%EC%BB%B4%ED%93%A8%ED%84%B0%EB%A7%9D/"/>
    
  </entry>
  
  <entry>
    <title>운영체제 - Overview_2</title>
    <link href="http://taejin0323.github.io/2019/02/12/os-overview-2/"/>
    <id>http://taejin0323.github.io/2019/02/12/os-overview-2/</id>
    <published>2019-02-12T09:51:53.000Z</published>
    <updated>2019-07-12T06:16:01.342Z</updated>
    
    <content type="html"><![CDATA[<p>📖 <strong>목차</strong> 📖</p><ol><li><a href="#%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%A1%B0">컴퓨터 시스템 구조</a><br>2.1 <a href="#21-%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EB%8F%99%EC%9E%91">컴퓨터 시스템의 동작</a><br>2.2 <a href="#22-io-%EA%B5%AC%EC%A1%B0">I/O 구조</a><br>2.3 <a href="#23-%EC%A0%80%EC%9E%A5-%EA%B5%AC%EC%A1%B0">저장 구조</a><br>2.4 <a href="#24-%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98%EC%9D%98-%EA%B3%84%EC%B8%B5%EA%B5%AC%EC%A1%B0">저장장치의 계층구조</a></li></ol><hr><h1 id="컴퓨터-시스템-구조"><a class="markdownIt-Anchor" href="#컴퓨터-시스템-구조"></a> 컴퓨터 시스템 구조</h1><h2 id="21-컴퓨터-시스템의-동작"><a class="markdownIt-Anchor" href="#21-컴퓨터-시스템의-동작"></a> 2.1 컴퓨터 시스템의 동작</h2><img style="height:450px; align:center;" src="https://i.imgur.com/8JAIHTg.png"><ul><li>컴퓨터는 <u>공유된 주기억장치에 접근을 제공하는 공통 버스에 의해 연결된 CPU와 여러 개의 장치 제어기(Device controller)로 구성</u>되어 있습니다.<ul><li>장치 제어기(Device Controller)<br>각 장치(디스크, 오디오 장치, 비디오 디스플레이)를 관리</li><li>장치 제어기와 CPU는 병행으로 수행되므로 이들은 주기억장치 접근에 대해 경쟁합니다. 주기억장치 제어기(Memory Controller)는 이들의 접근을 동기화해줍니다.</li></ul></li><li>컴퓨터가 처음 구동되면 초기에 실행될 프로그램이 필요합니다. 이 프로그램을 <strong>부트스트랩 프로그램(Bootstrap program)</strong> 이라고 합니다. 이 프로그램은 보통 컴퓨터 하드웨어 내에 ROM(Read-Only-Memory)에 저장되어 있습니다.<ul><li>부트스트랩 프로그램(Bootstrap program)<br>모든 하드웨어를 초기화하고 운영체제 커널을 주기억장치에 적재한 후에 커널을 실행</li></ul></li></ul><br><ul><li>컴퓨터에서 사건(Event)의 발생은 <strong>인트럽트(interrupt)</strong> 신호, <strong>트랩(trap)</strong> 혹은 <strong>예외(Exception)</strong> 를 통해 운영체제에 통보됩니다. 사건이 발생되면 CPU는 현재 수행중인 작업을 멈추고, 운영체제 내에 있는 특정 코드를 실행합니다. 이 실행이 끝나면 다시 멈춘 작업을 재개합니다.</li></ul><img height="250px" src="http://pediaa.com/wp-content/uploads/2018/08/Difference-Between-Trap-and-Interrupt_Figure-1.png"><p><span style="color:red">Interrupt</span></p><ul><li><strong>Hardware Interrupt</strong> : 하드웨어는 CPU에 특정 신호를 보내어 인트럽트의 발생을 알림<br>– 예) 키보드 입력, I/O interrupt, timer ticks</li><li>하드웨어가 시스템의 수행 흐름을 바꾸기 위해 발생하는 것</li><li>비동기식(Asynchronus Interrupt)</li></ul><p><span style="color:red">Trap</span></p><ul><li><strong>Software Interrupt</strong> : 시스템호출(System call)이라는 특정 연산을 실행하여 일부로 발생시키거나 오류 때문에 자발적으로 발생<br>– 오류의 예) 0 나누기, 부적합한 주기억장치 접근(page fault)</li><li>동기식(Synchronus Interrupt)</li></ul><p><span style="color:red">Exception</span></p><ul><li>프로세서에 의해 자동으로 처리</li><li><strong>Faults</strong> 와 <strong>Aborts</strong> 로 세분화 가능<br>– Faults : 복구 가능한 오류 (recoverable error)<br>– Aborts : 처리하기 어려운 오류 (an error that is difficult to handle)</li></ul><br><h2 id="22-io-구조"><a class="markdownIt-Anchor" href="#22-io-구조"></a> 2.2 I/O 구조</h2><ul><li>장치 제어기(Device controller)에 따라 하나 이상의 장치가 제이거에 연결될 수 있습니다</li><li>장치 제어기는 지역 버퍼와 몇 개의 특수 목적 레지스터를 유지합니다</li><li>장치 제어기는 연결된 주변장치와 지역 버퍼 간에 데이터 이동을 책임집니다. 이 버퍼의 크기는 주변장치에 따라 다릅니다.</li></ul><h3 id="221-io-interrupt"><a class="markdownIt-Anchor" href="#221-io-interrupt"></a> 2.2.1 I/O Interrupt</h3><ul><li>입출력의 두 가지 형태<br>– 동기식 입출력(Synchronous I/O) : 입출력이 시작되면 요청한 프로세서는 입출력이 완료될 때까지 기다림<br>– 비동기식 입출력(Asynchronous I/O) : 요청한 프로세서는 입출력이 완료될 때까지 기다리지 않고 계속 다른 작업을 수행</li><li>입출력의 완료를 기다리는 방법<br>– 특수한 명령어 사용<br>– 대기 루프 사용</li><li><u>만약 CPU가 입출력 완료를 항상 기다리면</u> 한번에 한 입출력만 가능<br>하지만 시스템의 효율을 높이기 위해 입출력과 계산을 병행할 수 있어야함으로 이 방법은 비효율적</li><li>운영체제는 여러 개의 입출력 요청을 관리하기 위해 <strong>장치 상태 테이블(device-status table)</strong> 을 유지합니다. 각 장치마다 대기큐를 유지합니다.</li></ul><img height="350px" src="https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/images/Chapter13/13_09_DeviceStatusTable.jpg"><h3 id="222-dma-구조"><a class="markdownIt-Anchor" href="#222-dma-구조"></a> 2.2.2 DMA 구조</h3><ul><li>속도가 느린 입출력 장치는 하나의 입력을 받은 후에 다음 입력까지 CPU는 다른 유용한 작업을 할 수 있습니다.<br>반대로 속도가 빠른 입출력 장치는 인트럽트가 너무 빈번하게 발생하여 CPU가 다른 유용한 작업을 할 시간이 없습니다.</li><li>이것을 해결하기 위해 사용하는 기법이 <strong>DMA(Direct Memory Access)</strong> 입니다.</li><li>DMA 방식에서 장치 제어기는 데이터 블록을 CPU의 관여없이 직접 주기억장치로 이동하며, 인터럽트는 바이트 단위가 아닌 블록 단위로 발생합니다.</li></ul><img style="align:center;" src="http://pds17.egloos.com/pds/200910/26/90/c0098890_4ae5a423a7cef.jpg"><br><h2 id="23-저장-구조"><a class="markdownIt-Anchor" href="#23-저장-구조"></a> 2.3 저장 구조</h2><img src="https://i.imgur.com/ofvb8E7.png"><ul><li><p>컴퓨터 프로그래밍이 실행되기 위해서는 <strong>주기억장치(main memory / primary storage / internal memory)</strong> 에 적재되어야 합니다</p></li><li><p>주기억장치는 보통 <u>동적 임의접근 메모리(dynamic Random-Access Memory, RAM)</u>라고 하는 반도체 메모리를 사용</p></li><li><p><u>CPU가 직접 접근할 수 있는 기억장치</u>는 주기억장치뿐입니다</p></li><li><p>주기억장치의 한 구성 단위를 <strong>워드(word)</strong> 라 하며, 각 워드는 독특한 주소를 가집니다</p></li><li><p><span style="color:red">주기억장치의 크기 / 주기억장치의 휘발성</span> 때문에 모든 프로그램과 데이터를 주기억장치에 영구적으로 저장할 수 없습니다</p></li><li><p>이 문제를 해결하기 위해 많은 양의 데이터를 영구 보관할 수 있는  <strong>보조 기억장치(auxiliary memory / secondary storage / external memory)</strong> 를 사용합니다</p></li></ul><h3 id="231-주기억장치"><a class="markdownIt-Anchor" href="#231-주기억장치"></a> 2.3.1 주기억장치</h3><ul><li><strong>Memory-mapped I/O</strong><br>주기억장치의 일부 주소가 입출력을 위해 예약되어 있으며, 이 주소에서 읽거나 쓰면 장치 레지스터로부터 데이터를 읽거나 쓰는 결과가 되는 것</li><li>CPU가 I/O 포트를 통해 연결된 장치와 데이터를 교환하는 2가지 방식<br>– <strong>Programmed I/O</strong> : CPU가 계속 장치의 상태를 검사(polling)하는 방식<br>– <strong>Interrupt</strong> : 다음 데이터를 처리할 준비가 되면 장치 제어기는 인터럽트를 통해 그 사실을 CPU에 알리는 방식</li><li>주기억장치와 CPU의 속도 차이를 극복하기 위해 주기억장치와 CPU 사이에 <strong>캐시(cache)</strong> 라고 하는 고속 메모리 버퍼를 사용</li></ul><img src="https://teachcomputerscience.com/wp-content/uploads/2016/12/cache_animation.gif"><h3 id="232-보조기억장치자기-디스크"><a class="markdownIt-Anchor" href="#232-보조기억장치자기-디스크"></a> 2.3.2 보조기억장치(자기 디스크)</h3><img style="height:150px; float:right;" src="https://www.applexsoft.com/glossary/harddisk.jpg"><ul><li>자기 디스크는 <strong>플래터(platter)</strong> 라고 하는 여러 개의 원형 판으로 구성<br>이 플래터는 다시 원형 모양의 <strong>트랙(track)</strong> 으로 구성<br>트랙은 다시 여러 개의 <strong>섹터(sector)</strong> 로 나뉘어짐</li></ul><img style="height:200px; float:right;" src="http://mblogthumb1.phinf.naver.net/20141226_132/capemay_1419579186649T86jM_PNG/010edsector.png?type=w2"><ul><li><p>단순하게 섹터를 여러 개를 하나로 묶은 것을 <strong>클러스터(cluster)</strong> 라 하고,<br>같은 위치에 있는 트랙의 모음을 <strong>실린더(cylinder)</strong> 라고 합니다<br>– 클러스터는 <u>운영체제에서 사용하는 데이터 저장의 최소 단위</u></p></li><li><p><strong>디스크의 속도</strong> = 컴퓨터로 데이터를 전송하는 비율인 전송률(transfer rate)<br>+plus+<br>임의접근 시간(random-access time)이라고 하는 위치결정 시간(positioning time)<br>에 의해 결정됩니다</p></li><li><p>데이터의 교환은 특수한 제어기를 통해 이루어집니다<br>컴퓨터 연결 끝에는 호스트 제어기<br>디스크 자체 내에는 디스크 제어기 가 있습니다</p></li><li><p>디스크 제어기는 자체적으로 캐시를 가지고 있습니다</p></li><li><p>실제 데이터는 디스크 제어기에 의해 디스크에서 캐시로 옮겨지고, 호스트 제어기는 캐시에 있는 데이터를 주기억장치로 옮깁니다</p></li></ul><h2 id="24-저장장치의-계층구조"><a class="markdownIt-Anchor" href="#24-저장장치의-계층구조"></a> 2.4 저장장치의 계층구조</h2><img src="https://eunhyejung.github.io/assets/contents/content03.PNG"><ul><li>계층구조에서 위에 위치할 수록 속도는 빠르지만 고가이며 휘발성의 성질을 가집니다</li><li>두 저장장치의 속도 차이는 중간에 빠른 캐시를 설치하여 극복할 수 있습니다</li><li>시스템을 구성할 때 저장장치의 계층구조를 균형있게 잘 구성하면 저렴한 가격에 높은 성능을 얻을 수 있습니다</li></ul><h3 id="241-캐싱"><a class="markdownIt-Anchor" href="#241-캐싱"></a> 2.4.1 캐싱</h3><ul><li>CPU가 데이터를 필요하면 먼저 캐시에 그 데이터가 있는지 검사합니다<br>만약 있으면 캐시에서 바로 사용하고 없으면 주기억장치에 있는 데이터를 사용하지만 이 데이터의 복사본을 캐시에 보관합니다. 이는 데이터를 곧 다시 사용할 확률이 높기 때문입니다</li><li><strong>캐시의 크기는 제한</strong> 되어 있으므로 이것을 잘 관리하여야 시스템의 성능을 높일 수 있습니다. 캐시의 크기와 교체 정책(replacement policy)을 잘 선택하면 원하는 데이터가 캐시에 있을 확률을 80%에서 99%까지 높일 수 있습니다</li><li>주기억장치는 CPU와 보조기억장치 사이에 있는 캐시로 사용될 수 있습니다</li></ul><h3 id="242-일관성"><a class="markdownIt-Anchor" href="#242-일관성"></a> 2.4.2 일관성</h3><ul><li>저장장치의 계층구조를 사용하면 같은 데이터가 여러 레벨에 존재할 수 있습니다</li><li>한번에 하나의 프로세스만 동작하면 아무 문제가 되지 않지만!<br>여러 프로세스가 같은 데이터를 접근하고자 하면 모든 프로세스가 최신의 데이터를 얻을 수 있도록 해야 합니다<br><u>이 문제는 다중프로세서 시스템에서 더욱 심각합니다</u></li><li>분산 환경에서는 여러 파일의 복사본이 여러 컴퓨터에 분산되어 있을 수 있습니다. 따라서 하나의 복사본에 대한 갱신이 이루어지면 다른 복사본도 갱신되도록 하여야 합니다</li></ul><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><p><a href="http://pediaa.com/difference-between-trap-and-interrupt/" target="_blank" rel="noopener">Difference between Trap and Interrupt</a></p><p><a href="http://recipes.egloos.com/5152867" target="_blank" rel="noopener">DMA-CPU몰래 영차영차</a></p><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;📖 &lt;strong&gt;목차&lt;/strong&gt; 📖&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%A1%B0&quot;&gt;컴퓨터 시스템 구조&lt;/
      
    
    </summary>
    
      <category term="OS" scheme="http://taejin0323.github.io/categories/OS/"/>
    
    
      <category term="OS" scheme="http://taejin0323.github.io/tags/OS/"/>
    
      <category term="운영체" scheme="http://taejin0323.github.io/tags/%EC%9A%B4%EC%98%81%EC%B2%B4/"/>
    
  </entry>
  
  <entry>
    <title>스프링 - IoC Containers</title>
    <link href="http://taejin0323.github.io/2019/02/11/spring-IoC/"/>
    <id>http://taejin0323.github.io/2019/02/11/spring-IoC/</id>
    <published>2019-02-11T07:15:05.000Z</published>
    <updated>2019-07-12T06:16:02.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><a href="https://data-flair.training/blogs/spring-ioc-containers/" target="_blank" rel="noopener">Spring IoC Containers – Types of Spring Container</a></li><li><a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#spring-core" target="_blank" rel="noopener">Spring 공식 문서</a></li><li><a href="https://isstory83.tistory.com/91" target="_blank" rel="noopener">Spring - IoC &amp; DI</a></li></ul><hr><p>📖 <strong>목차</strong> 📖</p><ul><li><a href="#%EC%9A%A9%EC%96%B4%EC%A0%95%EB%A6%AC">용어정리</a></li><li><a href="#iocinversion-of-control-%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84">IoC</a></li><li><a href="#spring-ioc-container">Spring IoC Container</a></li></ul><p><code>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</code></p><h2 id="용어정리"><a class="markdownIt-Anchor" href="#용어정리"></a> 용어정리</h2><dl><dt><span style="color:green">Bean</span> - <strong>빌더 형식의 개발도구에서 가시적으로 조작이 가능하고 또한 재사용이 가능한 소프트웨어 컴포넌트</strong></dt><dd>썬 마이크로시스템즈에서 정의한 자바빈. 명칭의 유래는 자바(java)를 개발할 때 개발자들이 커피를 너무 많이 소비하여 커피가 그들의 상징으로 사용하였고, 커피콩(beans)은 작은 커피콩처럼 코딩의 작은 부분들을 나타냅니다.</dd><dt><span style="color:green">Spring Bean</span> - <strong>스프링 IoC 컨테이너로 DI(의존성 주입)을 통해 구성 요소를 관리하는 객체</strong></dt><dd>자바빈, EJB의 빈과 비슷한 오브젝트 단위의 애플리케이션 컴포넌트를 말합니다. 하지만 스프링을 사용하는 애플리케이션에서 만들어지는 모든 오브젝트가 빈은 아닙니다. <strong>스프링의 빈은 컨테이너가 생성과 관계 설정, 사용 등을 제어해주는 오브젝트를 가리킵니다.</strong></dd><dt><span style="color:green">Container(IoC container)</span> - <strong>개발자가 작성한 코드의 처리과정을 위임받은 독립적인 존재</strong></dt><dd>적절한 설정만 되어 있다면 누구의 도움 없이도 개발자가 작성한 코드를 스스로 참조한 뒤 알아서 객체의 생성과 소멸을 컨트롤 해줍니다. 스프링에서는 IoC 방식으로 bean을 관리한다는 의미에서 bean factory나 application context를 가리킵니다.</dd></dl><h2 id="iocinversion-of-control-제어의-역전"><a class="markdownIt-Anchor" href="#iocinversion-of-control-제어의-역전"></a> IoC(Inversion of Control - 제어의 역전)</h2><p>Inversion of Control(<strong>IoC</strong>)은 Dependency Injection(<strong>DI</strong>)라고 알려져 있기도 합니다. 엄밀하게는 DI는 아래의 그림과 같이 IoC 패턴 중 하나이지만 IoC의 개념을 잡는데 흔히 마틴 파울러의 <em>‘Dependency Injection Pattern’</em> 글( <a href="http://wiki.javajigi.net/pages/viewpage.action?pageId=68" target="_blank" rel="noopener">번역</a> )을 참고하다 보니 그런 것 같습니다.</p><p><img src="https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553" alt="ioc"></p><p><span style="color:red;">DL (Dependency Lookup) - 의존성 검색</span></p><ul><li>저장소에 저장되어 있는 빈(Bean)에 접근하기 위하여 개발자들이 컨테이너에서 제공하는 API를 이용하여 사용하고자 하는 빈을 검색(Lookup)하는 것</li></ul><p><span style="color:red;">DI (Dependency Injection) - 의존성 주입</span></p><ul><li>각 계층 사이, 각 클래스 사이에 필요로 하는 의존 관계를 컨테이너가 자동으로 연결해 주는 것</li><li>각 클래스 사이의 의존 관계를 빈 설정(Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해 주는 것</li><li><strong>DL 사용시 컨테이너 종속성이 증가하여, 이를 줄이기 위해 DI를 사용</strong></li></ul><p><span style="color:blue;">Setter Injection</span></p><ul><li>객체를 생성 후 의존성 삽입 방식이기에 구현시에 좀 더 유연하게 사용</li><li>setter()를 통하여 필요한 값이 할당되기 전까지 객체를 사용할 수 없음</li><li>스프링 프레임워크의 빈 설정 파일에서 property를 사용</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanOne"</span>&gt;</span><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"anotherExampleBean"</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--setter injection using the neater 'ref' attribute --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanTwo"</span> <span class="attr">ref</span>=<span class="string">"yetAnotherBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"integerProperty"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"anotherExampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.AnotherBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"yetAnotherBean"</span> <span class="attr">class</span>=<span class="string">"examples.YetAnotherBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AnotherBean beanOne;</span><br><span class="line">    <span class="keyword">private</span> YetAnotherBean beanTwo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanOne</span><span class="params">(AnotherBean beanOne)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">this</span>.beanOne</span>=beanOne;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanTwo</span><span class="params">(YetAnotherBean beanTwo)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">this</span>.beanTwo</span>=beanTwo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntegerProperty</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">this</span>.i</span>=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:blue;">Constructor Injection</span></p><ul><li>생성자에 파라미터를 지정함으로 생성하고자하는 객체가 필요로 하는 것을 명확하게 알 수 있음</li><li>생성의 순서를 지켜야 하기 때문에 불편</li><li>스프링 프레임워크의 빈 설정 파일에서 constructor-arg 사용</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"anotherExampleBean"</span>/&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"yetAnotherBean"</span>/&gt;</span><span class="comment">&lt;!-- 위 아래 동일한 방법 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"anotherExampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.AnotherBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"yetAnotherBean"</span> <span class="attr">class</span>=<span class="string">"examples.YetAnotherBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AnotherBean beanOne;</span><br><span class="line">    <span class="keyword">private</span> YetAnotherBean beanTwo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleBean</span><span class="params">(AnotherBean anotherBean, YetAnotherBean yetAnotherBean, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanOne=anotherBean;</span><br><span class="line">        <span class="keyword">this</span>.beanTwo=yetAnotherBean;</span><br><span class="line">        <span class="keyword">this</span>.i=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:blue;">Method Injection</span></p><ul><li>Singleton 인스턴스와 Non-Singleton 인스턴스의 의존 관계를 연결 시킬 필요가 있을 경우 사용하지만, 많이 사용되지는 않습니다.</li></ul><h2 id="spring-ioc-container"><a class="markdownIt-Anchor" href="#spring-ioc-container"></a> Spring IoC Container</h2><img src="http://www.javachain.com/wp-content/uploads/2014/07/Beanfactory1.png"><p>스프링 프레임워크의 IoC 컨테이너에는 크게</p><ul><li><strong>Bean Factory</strong> (org.springframework.beans)</li><li><strong>Application Context</strong> (org.springframework.context)</li></ul><p>두 종류가 있습니다.</p><h4 id="1-bean-factory"><a class="markdownIt-Anchor" href="#1-bean-factory"></a> 1. Bean Factory</h4><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;reference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reference&quot;&gt;&lt;/a&gt; Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data-flair.training/blogs/sp
      
    
    </summary>
    
      <category term="WEB" scheme="http://taejin0323.github.io/categories/WEB/"/>
    
      <category term="SPRING" scheme="http://taejin0323.github.io/categories/WEB/SPRING/"/>
    
    
  </entry>
  
  <entry>
    <title>운영체제 - Overview_1</title>
    <link href="http://taejin0323.github.io/2019/02/05/os-overview/"/>
    <id>http://taejin0323.github.io/2019/02/05/os-overview/</id>
    <published>2019-02-05T10:29:30.000Z</published>
    <updated>2019-02-12T09:53:41.142Z</updated>
    
    <content type="html"><![CDATA[<p>📖 <strong>목차</strong> 📖</p><ol><li><a href="#%EC%86%8C%EA%B0%9C">소개</a><br>1.1 <a href="#11-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C">운영체제</a><br>1.2 <a href="#12-%EB%A9%94%EC%9D%B8%ED%94%84%EB%A0%88%EC%9E%84-%EC%8B%9C%EC%8A%A4%ED%85%9C">메인프레임 시스템</a><br>1.3 <a href="#13-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C">실시간 처리 시스템</a><br>1.4 <a href="#14-%EB%B6%84%EC%82%B0-%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C">분산 처리 시스템</a><br>1.5 <a href="#15-%EB%8B%A4%EC%A4%91%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C">다중처리 시스템</a><br>1.6 <a href="16-%EC%A7%91%EB%8B%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C">집단 시스템</a></li></ol><hr><h1 id="1-소개"><a class="markdownIt-Anchor" href="#1-소개"></a> 1. 소개</h1><h2 id="11-운영체제"><a class="markdownIt-Anchor" href="#11-운영체제"></a> 1.1 운영체제</h2><img src="https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg"><img style="float:right;" src="https://upload.wikimedia.org/wikipedia/ko/thumb/a/a3/Operating_system_placement_kor.png/200px-Operating_system_placement_kor.png"><ul><li><p>운영체제(Operating System)란?</p><p>– 컴퓨터 하드웨어를 관리하는 프로그램<br>– 응용 프로그램의 토대를 제공해주는 프로그램<br>– <strong><span style="color:orange;">사용자</span>와 <span style="color:red;">하드웨어</span> 사이에 중간 매개체 역할</strong>을 해주는 프로그램</p></li><li><p>운영체제 범위에 대한 정의<br>🐙 하드웨어의 종류와 용도가 다양해서 OS의 범위는 모호하게 정의됩니다​<br>정의 1) 운영체제를 구입하였을 때 포함되어 있는 모든 것<br><u>정의 2) 항상 수행되고 있는 유일한 프로그램(보통 <strong>Kernel</strong> 이라고 한다)</u><br>✅ 대체로 2번 째 정의를 사용함</p></li></ul><p>❗️ 그림에서 처럼 운영체제는 컴퓨터의 사용자와 컴퓨터 하드웨어 사이에 있기 때문에 운영체제를 바라보는 관점도 두 가지로 분류할 수 있습니다.</p><h3 id="111-span-stylecolororange사용자-관점span"><a class="markdownIt-Anchor" href="#111-span-stylecolororange사용자-관점span"></a> 1.1.1 <span style="color:orange;">사용자 관점</span></h3><ul><li><p><strong>컴퓨터의 용도</strong> 에 따라 OS의 설계 방향이 결정 됩니다.</p><p>– 개인용 컴퓨터(Home PC user)<br>– 메인프레임, 미니컴퓨터(Mainframe, minicomputer)<br>– 워크스테이션(Workstation)<br>– 휴대용 컴퓨터(Mobile devices)</p></li></ul><h3 id="112-span-stylecolorred시스템-관점span"><a class="markdownIt-Anchor" href="#112-span-stylecolorred시스템-관점span"></a> 1.1.2 <span style="color:red;">시스템 관점</span></h3><ul><li><strong>자원 할당자(resource allocator)</strong><br>컴퓨터 자원(CPU 시간, 메모리 공간, 파일 저장 공간, 입출력 장치)의 할당은 공정해야 하며 효율적으로 이루어져야 합니다.</li><li><strong>제어 프로그램(control program)</strong><br>사용자 프로그램의 실행을 감독하여 오류와 컴퓨터 오용을 방지하고 입출력 장치의 제어와 동작을 관리 합니다.</li></ul><h3 id="113-운영체제의-목표"><a class="markdownIt-Anchor" href="#113-운영체제의-목표"></a> 1.1.3 운영체제의 목표</h3><ul><li><span style="color:orange;">사용자</span>에게 편리성 제공</li><li><span style="color:red;">컴퓨터 시스템</span>의 효율적 운영</li></ul><p>🐙 <strong>사용자에게 컴퓨터에서 프로그램을 효율적이고 편리하게 실행할 수 있는 환경을 제공</strong> 하는 것 입니다!!</p><h2 id="12-메인프레임-시스템"><a class="markdownIt-Anchor" href="#12-메인프레임-시스템"></a> 1.2 메인프레임 시스템</h2><h3 id="121-일괄처리-시스템1950"><a class="markdownIt-Anchor" href="#121-일괄처리-시스템1950"></a> 1.2.1 일괄처리 시스템(1950)</h3><p>🐙 <strong>Batch processing system이란 처리속도를 향상 시키기 위해 유사한 요구를 필요로 하는 여러개의 작업을 함께 모아 단일 작업으로 일괄 처리하는 시스템입니다</strong></p><ul><li><p>운영체제는 항상 <strong>메모리</strong> 에 상주하고, 주 임무는 <strong>하나의 작업에서 다음 작업으로 제어를 자동적으로 옮기는 것</strong></p></li><li><p>작업을 실행하면 끝날 때까지 다른 작업을 못함</p></li><li><p><span style="color:red">기계적 입출력 장치가 전자적 장치의 속도보다 상대적으로 느려 CPU가 종종 쉬는 경우가 발생</span></p></li></ul><p><span style="color:blue">직접 접근(direct access)이 가능한 디스크의 도입 : Job scheduling과 multi-programming이 가능하게 됨</span></p><h3 id="122-다중-프로그램-시스템1960"><a class="markdownIt-Anchor" href="#122-다중-프로그램-시스템1960"></a> 1.2.2 다중 프로그램 시스템(1960)</h3><p>🐙 <strong>Multi-program system 이란 여러 개의 프로그램을 동시에 메모리에 적재하여 하나의 프로그램이 대기 상태가 되면 그 동안 다른 프로그램을 실행하는 시스템입니다</strong></p><ul><li>입출력과 프로그램의 실행을 병행으로 수행할 수 있어 CPU의 사용 효율(utilization)이 증가</li><li>다중 프로그래밍에서 운영체제는 사용자를 대신하여 의사결정을 수행해야 함<br>– <strong>Job scheduling</strong> : 디스크에 있는 작업 저장소(Job pool)에서 작업을 선택하여 메모리로 옮기는 것<br>– <strong>CPU scheduling</strong> : 실행 중인 작업이 대기 상태가 되었을 때 메모리에 있는 작업 중 하나를 선택하여 CPU에 할당하는 것</li><li><span style="color:red">여러 프로그램이 동시에 메모리에 상주하므로 메모리 관리가 복잡</span></li><li>Multi programming을 제공하는 일괄처리 시스템은 <span style="color:red">CPU의 사용 효율은 높였지만 사용자와 컴퓨터 간에 상호작용은 제공하지 못함</span></li></ul><h3 id="123-시분할-시스템1960"><a class="markdownIt-Anchor" href="#123-시분할-시스템1960"></a> 1.2.3 시분할 시스템(1960)</h3><p>🐙 <strong>시분할(Time sharing) 또는 멀티태스킹(multi-tasking)은 다중 프로그래밍과 달리 정해진 시간이 되면 무조건 다음 순서의 작업을 실행하는 방식</strong> 으로 교대하는 시간이 매우 짧아 프로그램이 실행되는 동안 사용자는 컴퓨터와 상호작용이 가능한 시스템입니다</p><ul><li>사용자와 시스템 간에 직접 상호작용이 가능한 시스템을 <strong>대화식 컴퓨터 시스템(inter-active computer system)</strong> 이라 하고 이런 시스템은 응답시간(response time)이 짧아야 함</li><li>여러 사용자가 동시에 컴퓨터를 사용할 수 있음</li><li>메모리에 적재되어 실행 중인 프로그램을 <strong>프로세스(process)</strong> 라고 함</li><li>많은 사용자의 프로그램을 동시에 수행하기 위해서는 <em>주기억장치</em> 의 용량으로는 부족<br><span style="color:blue">디스크를 주기억장치의 보조 저장 장치로 활용으로 문제를 해결하며 가장 널리 사용되는 기법으로 가상 메모리(virtual memory)</span> 가 있습니다</li></ul><h2 id="13-실시간-처리-시스템"><a class="markdownIt-Anchor" href="#13-실시간-처리-시스템"></a> 1.3 실시간 처리 시스템</h2><p>🐙 <strong>Real time processing system 이란</strong> 프로세서 작동이나 데이터 흐름에 엄격한 시간 제약이 있을 때 사용되는 방식으로 <strong>데이터 처리 요구가 있는 즉시 수행하여 결과를 산출하는 시스템입니다</strong></p><ul><li>보통 특수 목적용(우주선 운행, 레이더 추적기, 핵물리학 실험, 은행의 온라인 업무)<br>주의) <u>실시간과 빠르다는 것은 다른 개념!!</u></li><li>엄격한 실시간 시스템(hard real-time system) : 중요한 작업이 정해진 시간 내에 완료됨을 보장</li><li>완화된 실시간 시스템(soft real-time system) : 중요한 작업이 우선순위를 가지지만 엄격하게 정해진 시간 내에 완료됨을 보장하지는 않음</li></ul><h2 id="14-분산-처리-시스템"><a class="markdownIt-Anchor" href="#14-분산-처리-시스템"></a> 1.4 분산 처리 시스템</h2><p>🐙 <strong>Distributed processing system 이란</strong> 다중처리 시스템과 마찬가지로 <strong>여러 프로세서(컴퓨터)를 사용</strong>하지만 밀결합 형태가 아닌 소결합(loosely coupled) 형태로 컴퓨터 버스나 클럭을 공유하지 않고, <strong>네트워크를 통해 통신하여 하나의 작업을 처리하는 시스템입니다</strong></p><ul><li>네트워크는 사용하는 프로토콜, 망의 크기, 전송 매체에 따라 분류<br>Ex) 망의 크기 : LAN, MAN, WAN</li></ul><h3 id="141-클라이언트-서버-시스템"><a class="markdownIt-Anchor" href="#141-클라이언트-서버-시스템"></a> 1.4.1 클라이언트-서버 시스템</h3><ul><li>서버 시스템은 크게 두 가지로 분류<ul><li><dl><dt>계산 서버 시스템(compute-server system)</dt><dd>클라이언트로 부터 요청을 받아 그것을 대신 수행해 준 다음에 클라이언트에게 결과를 되돌려 줌</dd></dl></li><li><dl><dt>파일 서버 시스템(file-server system)</dt><dd>클라이언트에게 파일 시스템 인터페이스를 제공, 클라이언트는 이 인터페이스를 통해 파일을 생성, 갱신, 삭제</dd></dl></li></ul></li></ul><h2 id="15-다중처리-시스템"><a class="markdownIt-Anchor" href="#15-다중처리-시스템"></a> 1.5 다중처리 시스템</h2><p>🐙 <strong>Multi-processing system 이란 여러 개의 CPU와 하나의 주기억장치를 이용하여 여러 개의 프로그램을 동시에 처리하는 방식을 취하는 시스템입니다</strong></p><ul><li>병렬 시스템(parallel system) 또는 밀결합 시스템(tightly coupled system) 이라고도 함</li><li><strong>처리율(throughput)</strong> : <u>N개의 프로세서를 사용한다고 처리율이 N배 증가하지는 않음 </u></li><li><strong>경제성</strong> : 여러 개의 단일 프로세서 시스템을 사용하는 것 보다 저렴</li><li><strong>신뢰성</strong> : 하나의 CPU가 고장나더라도 다른 CPU를 이용하여 업무를 처리할 수 있음<br>수행되는 하드웨어의 수에 비례하여 서비스를 계속 제공할 수 있는 능력(graceful degradation)</li></ul><h2 id="16-집단-시스템"><a class="markdownIt-Anchor" href="#16-집단-시스템"></a> 1.6 집단 시스템</h2><p>🐙 <strong>Clustered system 이란 병렬 시스템, 분산 시스템과 마찬가지로 다중 CPU를 사용하지만 여러 개의 시스템을 밀결합하여 사용한다는 측면에서 다른 시스템입니다</strong></p><ul><li>집단화(clustering)의 목적은 높은 가용성</li><li>대칭형 방식 : 각 컴퓨터는 모두 응용 프로그램을 수행하는 동시에 다른 컴퓨터의 상태를 감시</li><li>비대칭형 방식: 하나의 컴퓨터는 대기상태로 있고 나머지는 활성화되어 응용 프로그램을 수행</li></ul><h2 id="17-컴퓨팅-환경"><a class="markdownIt-Anchor" href="#17-컴퓨팅-환경"></a> 1.7 컴퓨팅 환경</h2><ul><li><p>초창기 컴퓨팅 환경은 중앙집중 --&gt; 유선통신 기술의 발달로 분산 컴퓨팅 환경 등장 --&gt; 무선통신 기술의 발달로 이동컴퓨팅(mobile computing) 환경 등장</p></li><li><p>인터넷의 발달로 현재의 컴퓨팅 환경을 웹 기반 컴퓨팅이라고 함</p></li><li><p>실시간 운영체제를 각종 기계와 장치에 내장하여 사용하는 컴퓨팅 환경을 <strong>임베디드 컴퓨팅(embedded computing)</strong> 환경이라고 함</p></li></ul><div style="border:3px; border-style:dashed; border-color:grey; text-color:black">  <b> * 정리 * </b><br>  1세대 : 일괄처리 시스템 <br>  2세대 : 다중프로그래밍, 다중 처리, 시분할, 실시간 처리 시스템<br>  3세대 : 다중모드 <br>  4세대 : 분산 처리 시스템  <br></div><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;📖 &lt;strong&gt;목차&lt;/strong&gt; 📖&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%86%8C%EA%B0%9C&quot;&gt;소개&lt;/a&gt;&lt;br&gt;
1.1 &lt;a href=&quot;#11-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C&quot;&gt;운영
      
    
    </summary>
    
      <category term="OS" scheme="http://taejin0323.github.io/categories/OS/"/>
    
    
      <category term="OS" scheme="http://taejin0323.github.io/tags/OS/"/>
    
      <category term="운영체제" scheme="http://taejin0323.github.io/tags/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/"/>
    
  </entry>
  
  <entry>
    <title>스프링 - POJO</title>
    <link href="http://taejin0323.github.io/2019/02/04/spring-pojo/"/>
    <id>http://taejin0323.github.io/2019/02/04/spring-pojo/</id>
    <published>2019-02-03T15:59:18.000Z</published>
    <updated>2019-07-12T06:16:02.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://ko.wikipedia.org/wiki/Plain_Old_Java_Object" target="_blank" rel="noopener">Plain Old Java Object-위키</a><br><a href="https://itewbm.tistory.com/entry/POJOPlain-Old-Java-Object" target="_blank" rel="noopener">POJO(Plain Old Java Object)</a></p><hr><p>📖 <strong>목차</strong> 📖</p><ul><li><a href="#pojo">POJO</a><ul><li><a href="#pojo%EC%9D%98-%ED%83%84%EC%83%9D">POJO의 탄생</a></li><li><a href="#enterprise-javaBean%EC%9D%98-%EB%93%B1%EC%9E%A5">Enterprise JavaBean의 등장</a></li><li><a href="#pojo-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC">POJO 프레임워크</a></li></ul></li></ul><p><code>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</code></p><h2 id="pojo"><a class="markdownIt-Anchor" href="#pojo"></a> POJO</h2><p>✔️ <strong>Plain Old Java Object</strong> : (직역) 평범한 옛날 자바 객체</p><p>처음에 단순히 정의를 검색하다보니 정말 단순한 자바 객체인 것 같은데 왜 굳이 POJO라는 단어를 사용하는지 혼란스러웠습니다. Stack Overflow 같은데서도 자바빈과 비교하는 토론이 있기도하고 솔직히 현재도 완전히 이해했다고는 할 수 없지만 제가 생각하는 내용을 적었습니다.</p><h5 id="pojo의-탄생"><a class="markdownIt-Anchor" href="#pojo의-탄생"></a> POJO의 탄생</h5><blockquote><p>Any fool can write code that a computer an understand. Good programmers write code that humans can understand.<br>컴퓨터가 이해하는 코드는 어느 바보나 짤 수 있다. 좋은 프로그래머는 사람이 이해하는 코드를 짠다.</p><blockquote><p>Martin Fowler, &lt;&lt;리팩토링&gt;&gt;</p></blockquote></blockquote><img style="float:right; height:150px;" src="https://martinfowler.com/img/mf-cologne.jpg"><p>POJO는 리팩토링과 애자일 소프트웨어 개발로 유명한 영국의 소프트웨어 개발자 <strong>마틴 파울러</strong> 가 2000년 가을에 열렸던 어느 컨퍼런스의 발표를 준비하면서 처음 사용한 단어입니다. 그는 당시 <u>EJB(Enterprise JavaBean) 보다는 단순한 자바 오브젝트에 도메인 로직을 넣어 사용하는 것이 여러가지 장점이 있는데 왜 사람들이 EJB가 아닌 '평범한 자바 오브젝트’를 사용하기를 꺼려하하는지에 대해 의문을 가졌습니다</u> 그래서 그의 생각을 널리 알리기 위해 그는 개발자들의 심리를 이용한 기발한 전략을 세웠습니다. POJO라는 용어를 만들고 이를 기반으로한 기술을 사용한다고 발표하여 다른 개발자들에게 마치 새로운 첨단 기술인 듯한 인상을 주었습니다.<br>정리하자면, 마틴 파울러는</p><ul><li>자바 개발자들에게 <strong>단순하고 평범한 자바 오브젝트 사용을 권장</strong> 하고</li><li><strong>자신의 생각을 효과적으로 전달</strong> 하기 위해 POJO라는 단어를 사용 했습니다<br>Cf) 이를 계기로 다른 분야에서도 비슷한 용어들이 생긴 것을 보면 그의 전략이 성공적이 였다는 것을 쉽게 알 수 있습니다.<ul><li>Plain Old Data Structures(PODS) - C++ 언어에서 오직 C 언어의 특징만 사용하는 경우</li><li>Plain Old Documentation(POD) - 펄(Perl) 언어에서 사용</li><li>Plain Old PHP Object(POPO) - PHP 언어에서 사용</li></ul></li></ul><p>이제 겨우 POJO의 형체가 희미하게 보이는 것 같습니다. 이 친구를 더 자세히 알기 위해선,</p><ul><li>EJB(Enterprise JavaBean)는 무엇이며 어떤 문제점이 있는가</li><li>POJO란 그럼 그저 EJB 이전의 방식으로 돌아가는 것인가<br>를 알아야 겠다고 생각했습니다.</li></ul><h5 id="enterprise-javabean의-등장"><a class="markdownIt-Anchor" href="#enterprise-javabean의-등장"></a> Enterprise JavaBean의 등장</h5><p>기술이 발전하면서 자바의 기초적인 JDK만으로 복잡해져가는 기업의 비즈니스 로직을 구현하는 것은 개발자들에게 부담이 되었습니다. 이러한 문제를 해결하기 위해 EJB가 등장하였고,  <strong>‘EJB를 사용하면 개발자는 로우레벨의 기술들에 관심을 가질 필요 없이 애플리케이션 개발을 쉽게 만들 수 있다’</strong> 라고 EJB 1.0의 스펙에서 제시 되었습니다.<br>하지만 현실은 불필요할 만큼 과도한 엔지니어링으로 <u>EJB는 실패한 케이스</u>라고 많은 개발자들이 이야기합니다.</p><ul><li>1% 미만의 애플리케이션에만 필요한 멀티 DB를 위한 분산 트랜잭션(무거운 JTA 기반의 글로번 트랜잭션 관리 기능)</li><li>고가의 WAS(CPU 당 몇 백에서 몇 천만 원) 필요</li><li>EJB 컴포넌트는 컨테이너 밖에서는 정상적으로 동작하지 않음(많은 시간이 걸리는 수정-빌드-배표-테스트 과정 반복)</li><li>간단한 기능에 대해서 조차 자동화 테스트를 만드는 것이 거의 불가능</li><li><strong>EJB 스텍을 따르는 비즈니스 오브젝트들은 객체지향적인 특징과 장점을 포기해야 함</strong></li></ul><p>결국 마틴 파울러와 같은 많은 오피니언 리더들은 EJB와 같은 잘못 설계된 과도한 기술을 피하고, 객체지향 원리에 따라 만들어진 자바 언어의 기본에 충실하게 비즈니스 로직을 구현하는 일명 <em>POJO 방식</em> 으로 돌아서야 한다고 지적하였습니다.</p><h5 id="pojo-프레임워크"><a class="markdownIt-Anchor" href="#pojo-프레임워크"></a> POJO 프레임워크</h5><p>이때까지 내용을 되짚어 보면 <strong>POJO란 결국 단순하고 기본에 충실한 자바 오브젝트로 되돌아 가는 것</strong>인데 그렇다면 또다시 로우레벨의 API를 이용해 복잡한 코드를 작성해야 하고, 많은 기술적인 문제들을 애플리케이션 코드에 그대로 노출시켜 개발해야 한다는 문제로 돌아간다는 것이 아닌가? 하는 의문이 생길 것 입니다.<br>개발자들이 비즈니스 로직에만 집중할 수 있는 애플리케이션 복잡도를 제거하는 장점은 그대로 가져가면서, 객체지향적인 설계와 자동화된 테스트의 편의성 등을 다시 회복시키기 위해 등장한 것이 바로 <strong>POJO 기반의 프레임워크</strong> 입니다! 가장 대표적인 프레임워크 제품으로는 <em>하이버네이트</em> 와 <em>스프링</em> 이 있습니다.</p><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;reference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reference&quot;&gt;&lt;/a&gt; Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/Plain_Old_Ja
      
    
    </summary>
    
      <category term="WEB" scheme="http://taejin0323.github.io/categories/WEB/"/>
    
      <category term="SPRING" scheme="http://taejin0323.github.io/categories/WEB/SPRING/"/>
    
    
      <category term="SPRING" scheme="http://taejin0323.github.io/tags/SPRING/"/>
    
      <category term="POJO" scheme="http://taejin0323.github.io/tags/POJO/"/>
    
  </entry>
  
  <entry>
    <title>스프링 프레임워크 핵심 개념</title>
    <link href="http://taejin0323.github.io/2019/02/02/spring-keywords/"/>
    <id>http://taejin0323.github.io/2019/02/02/spring-keywords/</id>
    <published>2019-02-02T06:16:10.000Z</published>
    <updated>2019-02-04T13:44:16.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><p><a href="https://asfirstalways.tistory.com/334" target="_blank" rel="noopener">Spring의 시작, 프레임워크의 구성요소와 동작원리</a><br><a href="https://scroogy.atlassian.net/wiki/spaces/SPRING/pages/1114310" target="_blank" rel="noopener">스프링 프레임워크 핵심</a></p><p><strong>POJO</strong><br><a href="https://limmmee.tistory.com/8" target="_blank" rel="noopener">스프링 프레임워크 1 - POJO에 대하여</a><br><a href="https://www.geeksforgeeks.org/pojo-vs-java-beans/" target="_blank" rel="noopener">POJO vs JavaBeans</a><br><a href="https://spring.io/understanding/POJO" target="_blank" rel="noopener">Understanding : POJO</a></p><p><strong>IoC/DI</strong><br><a href="https://limmmee.tistory.com/13?category=654011" target="_blank" rel="noopener">스프링 프레임워크 2 - 컨테이너와 IoC</a><br><a href="http://wiki.javajigi.net/pages/viewpage.action?pageId=3664" target="_blank" rel="noopener">Spring 프레임워크 소개와 IoC 및 Spring IoC의 개념</a><br><a href="www.nextree.co.kr/p11247/">세 가지 DI 컨테이너로 향하는 저녁 산책</a><br><a href="http://springmvc.egloos.com/487497" target="_blank" rel="noopener">스프링이 도대체 뭐란 말인가?</a></p><hr><p>📖 <strong>목차</strong> 📖</p><ul><li><a href="#pojo">POJO</a></li><li><a href="#ioc-/-di">IoC / DI</a></li><li><a href="#aop">AOP</a></li><li><a href="#psa">PSA</a></li></ul><h2 id="핵심-개념들"><a class="markdownIt-Anchor" href="#핵심-개념들"></a> 핵심 개념들</h2><ul><li>스프링 프레임워크를 공부하면서 자주 언급되고 매우 중요하다고 생각하는 용어들을 정리했습니다</li><li>아직 많은 것을 알지 못하기 때문에 자세하고 정확한 내용은 제가 참조한 사이트나 따로 검색 또는 책을 통해 알아보는 것을 권장드립니다.</li></ul><p><img src="https://dhsim86.github.io/static/assets/img/blog/web/2017-11-18-toby_spring_08_what_is_spring//00.png" alt="spring triangle"></p><hr><h3 id="pojo"><a class="markdownIt-Anchor" href="#pojo"></a> POJO</h3><p>이해가 어려우신 분들은 간략히,</p><ul><li>스프링 프레임워크를 사용하면 <strong>POJO로 애플리케이션을 만들고 엔터프라이즈 서비스를 비침투적으로 POJO에 적용할 수 있다</strong></li><li><strong>모든 JavaBeans는 POJO 이지만, 모든 POJO는 JavaBeans가 아니다</strong></li></ul><p><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pojo.jpg" alt="pojo&amp;javabean"></p><p>이 정도만 숙지하고 넘어가셔도 상관 없을 것 같습니다.</p><p>✔️ <strong>Plain Old Java Object</strong> : (직역) 평범한 옛날 자바 객체</p><p>더 자세한 내용은 다른 포스트에서 다루겠지만, 간략히 스프링 공식 홈페이지에서는 POJO를 다음과 같이 소개합니다.</p><blockquote><p>By using plain old Java objects, your code is much more simplified, which lends to better testing, flexibility, and ability to change technical decisions at future stages based on knowledge and shifting requirements.</p></blockquote><p>POJO를 사용함으로써,</p><ul><li>코드가 간결해져서 테스트하기 편해지고 (비즈니스 로직과 특정 환결/로우 레벨 종속적인 코드를 분리함)<br>쉽게 말해 인터페이스, 상속이 없는 것</li><li>유연해서 객체지향적 설계의 자유료운 사용이 가능</li></ul><p><strong>POJO 기반의 프레임워크 == 스프링 프레임워크</strong></p><p>많은 POJO 프레임워크가 있고 하이버네이트와 스프링이 대표적이라고 할 수 있습니다. (이 둘의 차이점은 굳이 자세히 알아보지는 않겠습니다.) 스프링 프레임워크가 <u>많은 POJO 프레임워크 제품 중 하나</u>라는 정도로 알고 넘어가셔도 좋습니다.</p><p><strong>진정한 POJO 프로그래밍</strong></p><p><u>자바의 객체지향적인 특징을 살려 비즈니스 로직에 충실한 개발이 가능하도록 하는 것이 진정한 POJO 프로그래밍</u>이라고 할 수 있습니다. 마치 자바를 처음 배울 때 흔히 하는 실수로, 개발은 자바로 하지만 실제로는 C 언어를 배우며 익숙해진 절차지향 방식으로 구현하는 것을 생각하시면 되겠습니다. 따라서 POJO 프레임워크 제품을 사용한다고 해서 자동으로 POJO 형식의 개발을 하고 있다고 할 수 없음을 인지하고 계셔야 합니다.</p><ul><li>객체지향적인 설계원칙에 충실하도록 개발되어 있는지</li><li>테스트 코드 개발의 용이성이나 테스트 코드를 잘 작성했는지</li></ul><p>를 잘 확인하시면서 POJO 프로그래밍의 장점을 잘 살려 스프링 프레임워크의 활용도를 극대화하려고 노력해야 할 것 같습니다.</p><hr><h3 id="ioc-di"><a class="markdownIt-Anchor" href="#ioc-di"></a> IoC / DI</h3><p>개인적으로 재밌었던 표현이라 그대로 참조한 블로그<a href="http://springmvc.egloos.com/487497" target="_blank" rel="noopener">스프링이 도대체 뭐란 말인가?</a>(꼭 읽어보면 좋을 것 같습니다)의 표현을 그대로 인용하자면, 간략하게 이 둘을 <strong>“대신 해줌(IoC)”</strong> 과 <strong>“미리 찜해 놓음(DI)”</strong> 이라고 설명하였습니다.<br><strong>정신 나간듯 언제 사용될 지도 모르는 코드를 쳐대면서(IoC) 동시에 사용하고 있는 코드가 뭔지도 모르면서 일단 갖다 쓰는(DI) 획기적이고 진보적인 프로그래밍 작성 방식</strong> 으로 IoC/DI의 개념을 표현하였고 어려우시면 이 정도로 이해하고 일단 넘어가시는 것도 좋을 것 같습니다.</p><p><img src="https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile10.uf.tistory.com%2Fimage%2F252FCF3B5231689B17B553" alt="ioc"></p><p>✔️ <strong>Inversion of Control</strong> : 제어의 역전</p><ul><li><dl><dt><strong>제어권(Control)</strong></dt><dd>자바 객체의 생성, 생명주기 관리, 객체간의 의존관계를 연결시키는 등의 행위에 대한 권한</dd></dl></li><li><p>객체에 대한 제어 권한이 바뀌는 것 즉, 제어 권한을 다른 대상에게 위임하는 것이라는 의미 (개발자 -&gt; 컨테이너)</p></li><li><p>프레임워크에서 개발자는 필요한 부분을 개발해서 &quot;조립&quot;하는 방식을 취하는데, 이렇게 조립된 코드의 최종 호출은 <u>개발자에 의해서 제어되는 것이 아니라 프레임워크 내부 동작 원리에 따라 이루어짐</u>. 이를 <strong>제어의 역전</strong> 이라고 표현</p></li><li><p>스프링 프레임워크에서 지원하는 IoC Container는 POJO의 생명주기를 관리, 생성된 인스턴트들에게 추가적인 기능들을 제공<br>cf) 라이브러리 vs 프레임워크 --&gt; IoC의 개념이 적용되었나의 차이</p></li></ul><p>✔️ <strong>Dependency Injection</strong> : 의존성 주입</p><ul><li><dl><dt><strong>의존성(Dependency)</strong></dt><dd>현재 객체가 다른 객체와 상호작용(참조)하고 있다면, 다른 객체들을 현재 객체의 의존 이라고 표현</dd></dl></li><li><p><strong>DI는 스프링 프레임워크에서 지원하는 IoC의 형태</strong></p></li><li><p>DI는 <u>클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동적으로 연결</u></p><p>예시)</p><p><em><strong>Ioc/DI 가 적용되지 않은 경우</strong></em></p></li></ul><p><img src="http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-02.png" alt="instance"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kr.co.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bar bar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        bar = <span class="keyword">new</span> SubBar();<span class="comment">//Bar 인터페이스를 구현하는 구체적인 클래스 SubBar로 초기화</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<em><strong>Ioc/DI 가 적용되지 않은 경우</strong></em></p><p><img src="http://www.nextree.co.kr/content/images/2016/09/yrkim-140701-framework-03.png" alt="inject"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Container</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bar"</span> <span class="attr">class</span>=<span class="string">"kr.co.study.SubBar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"kr.co.study.Foo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bar"</span> <span class="attr">ref</span>=<span class="string">"bar"</span>/&gt;</span><span class="comment">&lt;!-- 사용할 객체들을 컨테이너에 등록 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//application code</span></span><br><span class="line"><span class="keyword">package</span> kr.co.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bar bar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBar</span><span class="params">(Bar bar)</span></span>&#123;<span class="comment">//사용할 객체를 매겨변수로 받아와 동적으로 의존관계를 설정</span></span><br><span class="line">        <span class="keyword">this</span>.bar = bar;<span class="comment">//Bar 인터페이스를 구현하는 구체적인 클래스 이름이 등장하지 않음</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>마틴 파울러가 그의 저서인 'Inversion of Control Containers and the Dependency Injection pattern’에서 세가지 DI 패턴을 제시<ul><li>setter() 메소드를 이용한 의존성 삽입(Setter Injection)</li><li>생성자를 이용한 의존성 삽입 (Constructor Injection)</li><li>초기화 인터페이스를 이용한 의존성 삽입(Interface Injection)</li></ul></li></ul><br>- 스프링 프레임워크에서의 DI 패턴  1. XML을 통한 의존성 주입     - 생성자를 통한 의존성 주입 : <constructor-arg> 태그와 ref 속성 이용     - 속성을 통한 의존성 주입 : <property> 태그를 사용, name 속성값이 호출하고자 하는 메소드의 이름  2. Annotation을 통한 의존성 주입     **@Autowired** 라는 어노테이션을 통해 의존성 주입. 비슷한 역할로 **@Resource** 어노테이션도 존재.     둘의 차이점은 bean을 탐색하는 우선순위의 기준<hr><h3 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> AOP</h3><ul><li><p>AOP의 핵심은 <strong>관심 분리(Separation of Concerns)</strong> 로써, <u>비즈니스 메소드를 개발할 때, 핵심 비즈니스 로직과 공통 로직을 분리함으로써 응집도가 높게 개발할 수 있도록 지원하는 것</u> 입니다.</p><p><img src="https://t1.daumcdn.net/cfile/tistory/185DF4334FA8A1FD01" alt="aop"></p></li></ul><p>✔️ <strong>Aspect Oriented Programming</strong> : 관점 지향 프로그래밍</p><ul><li>핵심적인 비즈니스 로직과 관련이 없으나 모듈성을 높일 목적으로 여러 곳에서 공통적으로 쓰이는 기능들을 분리( separating cross-cutting concerns)하여 개발하고 실행 시에 서로 조합</li><li>Logging, Security, Transaction 등을 aspect라는 특별한 객체로 모듈화, weaving이라는 작업을 통해 모듈화한 코드를 핵심 기능에 넣음</li></ul><hr><h3 id="psa"><a class="markdownIt-Anchor" href="#psa"></a> PSA</h3><p>✔️ <strong>Potable Service Abstraction</strong> : (이식 가능한)일관성 있는 서비스 추상화</p><ul><li>POJO로 개발된 코드는 특정 환경이나 구현 방식에 종속적이지 않아야 함<br>(특정 환경에 종속적이지 않다는 게 그런 기술을 사용하지 않는다는 뜻은 아님)</li><li>스프링은 완성도가 높은 라이브러리와 연결할 수 있는 인터페이스를 제공</li></ul><hr><p><br><br><br></p></property></constructor-arg>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;reference&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reference&quot;&gt;&lt;/a&gt; Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://asfirstalways.tistory.com/334&quot; tar
      
    
    </summary>
    
      <category term="WEB" scheme="http://taejin0323.github.io/categories/WEB/"/>
    
      <category term="SPRING" scheme="http://taejin0323.github.io/categories/WEB/SPRING/"/>
    
    
      <category term="SPRING" scheme="http://taejin0323.github.io/tags/SPRING/"/>
    
  </entry>
  
  <entry>
    <title>스프링 프레임워크 모듈</title>
    <link href="http://taejin0323.github.io/2019/01/31/spring-module/"/>
    <id>http://taejin0323.github.io/2019/01/31/spring-module/</id>
    <published>2019-01-31T10:08:32.000Z</published>
    <updated>2019-02-02T07:21:34.659Z</updated>
    
    <content type="html"><![CDATA[<p>📘 <strong>목차</strong> 📖</p><p><a href="#%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EB%AA%A8%EB%93%88">스프링 프레임워크 모듈</a></p><hr><h2 id="스프링-프레임워크-모듈"><a class="markdownIt-Anchor" href="#스프링-프레임워크-모듈"></a> 스프링 프레임워크 모듈</h2><p><img src="https://docs.spring.io/spring/docs/4.3.22.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png" alt="framework modules"></p><p>위 그림에 나와있듯이 스프링 프레임워크는 약 20개의 모듈들로 이루어져 있습니다.</p><ul><li>Data Access/Integration; Web; AOP; Aspects; Instrumentation; Messaging; Core Container; and Test;</li></ul><table><thead><tr><th style="text-align:center">모듈 그룹</th><th style="text-align:center">설명</th></tr></thead><tbody><tr><td style="text-align:center">Core Container</td><td style="text-align:center">* 스프링 프레임워크의 기본 모듈을 포함</td></tr><tr><td style="text-align:center">AOP 및 Instrumentation</td><td style="text-align:center">* 관점 지향 프로그래밍(AOP; Aspect-Oriented Programming) 및 Class Instrumentation을 지원하는 모듈을 포함</td></tr><tr><td style="text-align:center">Messaging</td><td style="text-align:center">* 프로그래밍 모듈을 기반으로한 스프링 MVC 어노테이션 처럼 메세지를 메소드에 맵핑 시키는 어노테이션의 세트를 포함</td></tr><tr><td style="text-align:center">Data Access/Inegration</td><td style="text-align:center">* DB 및 메시징 공급자와의 상호작용을 간소화하는 모듈을 포함</td></tr><tr><td style="text-align:center">Web</td><td style="text-align:center">* 웹 및 포틀릿 애플리케이션 개발을 간소화하는 모듈을 포함</td></tr><tr><td style="text-align:center">Test</td><td style="text-align:center">* 단위 및 통합 테스트 생성을 간소화하는 모듈 하나를 포함</td></tr></tbody></table><p>이처럼 스프링은 <strong>웹 애플리케이션 개발, 데이터베이스 접근, 트랜잭션 관리, 단위 및 통합 테스트 생성</strong> 등등 엔터프라이즈 애플리케이션 개발의 모든 측면을 지원하고 이렇게 다양한 기능 중 우리는 필요한 것만 선택적으로 사용하면 됩니다.</p><p>만약 개발하고 있는 애플리케이션에서 스프링의 DI 기능<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>을 사용하려면 Core Container 모듈 그룹에 속한 Spring-Core나 Spring-Beans 모듈을 선택해 사용하면 됩니다.</p><h3 id="스프링-프레임워크-모듈-간-상호의존성"><a class="markdownIt-Anchor" href="#스프링-프레임워크-모듈-간-상호의존성"></a> 스프링 프레임워크 모듈 간 상호의존성</h3><p><img src="https://1.bp.blogspot.com/-8MEJX0VwvO8/Wi0I3qLwk7I/AAAAAAAAgo0/nu7QGP77ZjA8hgCHdwDmjdgKNMJYjf_EACLcBGAs/s1600/1.1.png" alt="dependency"></p><ul><li><strong>Core Container</strong> 그룹이 스프링 프레임워크의 중심</li><li><strong>AOP 및 Instrumentation</strong> 그룹에 포함된 모듈도 이를 의존하는 다른 모듈이 많기에 중요도가 높음</li></ul><p>지금은 이해가 잘 안되지만 앞으로 각각의 모듈들에 대해 자세히 알아볼 예정입니다.</p><p>다음 포스팅에서는 각각의 모듈들을 알아가기 전에 꼭 알아둬야하는 개념들을 가볍게 집고 넘어가겠습니다.</p><ul><li>제어의 역적(IoC); 의존성 주입(DI); 관전 지향 프로그래밍(AOP); Model View Control(MVC);</li></ul><p><img src="https://d2h0cx97tjks2p.cloudfront.net/blogs/wp-content/uploads/sites/2/2018/06/Spring-Framework-Modules-01.jpg" alt="modules todo"></p><p><br><br><br></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>DI 기능에 대해서는 다음에 따로 포스트할 예정(포스팅 하면 수정!!) <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;📘 &lt;strong&gt;목차&lt;/strong&gt; 📖&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EB%AA%A8%EB%93%88&quot;&gt;
      
    
    </summary>
    
      <category term="WEB" scheme="http://taejin0323.github.io/categories/WEB/"/>
    
      <category term="SPRING" scheme="http://taejin0323.github.io/categories/WEB/SPRING/"/>
    
    
      <category term="FRAMEWORK" scheme="http://taejin0323.github.io/tags/FRAMEWORK/"/>
    
      <category term="MODULES" scheme="http://taejin0323.github.io/tags/MODULES/"/>
    
  </entry>
  
  <entry>
    <title>C-CDA 란?</title>
    <link href="http://taejin0323.github.io/2019/01/28/cda-tutorial-1/"/>
    <id>http://taejin0323.github.io/2019/01/28/cda-tutorial-1/</id>
    <published>2019-01-28T07:08:17.000Z</published>
    <updated>2019-01-31T06:54:30.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="related-posts"><a class="markdownIt-Anchor" href="#related-posts"></a> Related Posts</h3><hr><blockquote><p>본 문서는 IHIS 연구소의 <strong>‘HL7 C-CDA 교육’</strong> pdf 문서를 기반으로 작성 되었습니다.</p></blockquote><hr><h2 id="목차"><a class="markdownIt-Anchor" href="#목차"></a> 📖<strong>목차</strong>📖</h2><p>1.<a href="#pre-consolidation-context">Pre-Consolidation context</a><br>2.<a href="#consolidated-cda">Consolidated CDA</a><br>3.<a href="#c-cda-ig-navigation">C-CDA IG Navigation</a></p><h2 id="pre-consolidation-context"><a class="markdownIt-Anchor" href="#pre-consolidation-context"></a> Pre-Consolidation context</h2><h5 id="cda-통합-이전"><a class="markdownIt-Anchor" href="#cda-통합-이전"></a> CDA 통합 이전</h5><p>컴퓨터와 인터넷이 보편화 되고 사람들의 기대수명이 높아지면서 ICT(Information and Communication System) 기술을 보건의료 영역에 적용하려는 움직임이 시작 되었습니다.<br>하지만 병원과 기관마다 서로 다른 소프트웨어를 사용하기 때문에 정보 교환 또는 호환이 어려운 문제점이 있었습니다. 이를 해결하고자 <em>HITSP, HL7, IHE, Health Story</em> 등의 여러 기업 및 기관들이 표준화된 **CDA(Clinical Document Architecture)**를 규정하고, 많은 사람들이 자신들의 표준을 사용하게 하기 위해 <strong>CDA Implementation Guide(CDA IG)</strong> 를 배포하였습니다.<br>각각의 표준은 비슷하지만 조금씩은 차이가 있었기 때문에 진정한 표준이 되지 못하고 다람쥐 쳇바퀴 돌 듯 이 문서들 간의 교환 및 교환의 문제가 발생하였습니다.</p><p><img src="/img/c-cda.png" alt="C-CDA"></p><h2 id="consolidated-cda"><a class="markdownIt-Anchor" href="#consolidated-cda"></a> Consolidated CDA</h2><p>2012년 <u>the Office of the National Coordinator for Health Information Technology(ONC)</u> 에서 이러한 문제점을 해결하고자 <strong>Consolidated CDA 라는 통일된 표준</strong> 을 제시하였다고 위키피디아<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>에 적혀있습니다. 저는 대중적으로 많이 사용하는 HL7 기관에서 2011년 12월에 발표한  'A draft Implementation Guide for CDA Release 2.0, Consolidated CDA Templates’<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>를 기반으로 다룰 것 입니다.</p><p><strong>C-CDA IG</strong> 는 아래와 같은 의료 문서를 포함합니다(year released)</p><ul><li>Consultation Note(2008)</li><li>Discharge Summary(2009)</li><li>Imaging Integration and DICOM Diagnostic Imaging Reports(DIR)(2009)</li><li>History and Physical(H&amp;P)(2008)</li><li>Operative Note(2009)</li><li>Progress Note(2010)</li><li>Procedure Note(2010)</li><li>Unstructured documents(2010)</li></ul><p><img src="/img/c-cda2.png" alt="C-CDA2"></p><h2 id="c-cda-ig-navigation"><a class="markdownIt-Anchor" href="#c-cda-ig-navigation"></a> C-CDA IG Navigation</h2><p>Consolidated CDA 작성 방법에 대한 자세한 정보는 공식 홈페이지를 참조하면 될 것 같습니다.<br><a href="http://www.hl7.org/implement/standards/product_matrix.cfm" target="_blank" rel="noopener">HL7 Implementation Guide for CDA Release 2:IHE Health Story Consolidation, Release 1.1 - US Realm</a></p><p><br><br><br></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/Clinical_Document_Architecture" target="_blank" rel="noopener">Consolidated Clinical Document Architecture 탭에 있음</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>초안의 사본은 HL7  웹 사이트를 가면 쉽게 찾을 수 있습니다. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;related-posts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#related-posts&quot;&gt;&lt;/a&gt; Related Posts&lt;/h3&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;본 문서는 IHIS 연구소의 &lt;stro
      
    
    </summary>
    
      <category term="IHIS" scheme="http://taejin0323.github.io/categories/IHIS/"/>
    
      <category term="HL7" scheme="http://taejin0323.github.io/categories/IHIS/HL7/"/>
    
    
      <category term="HL7" scheme="http://taejin0323.github.io/tags/HL7/"/>
    
      <category term="CDA" scheme="http://taejin0323.github.io/tags/CDA/"/>
    
      <category term="C-CDA" scheme="http://taejin0323.github.io/tags/C-CDA/"/>
    
  </entry>
  
  <entry>
    <title>포스트 작성을 위한 Hexo Plugins</title>
    <link href="http://taejin0323.github.io/2019/01/23/markdown-plugin/"/>
    <id>http://taejin0323.github.io/2019/01/23/markdown-plugin/</id>
    <published>2019-01-23T07:32:24.000Z</published>
    <updated>2019-07-12T03:08:28.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="related-posts"><a class="markdownIt-Anchor" href="#related-posts"></a> Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;related-posts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#related-posts&quot;&gt;&lt;/a&gt; Related Posts&lt;/h3&gt;

      
    
    </summary>
    
      <category term="BLOG" scheme="http://taejin0323.github.io/categories/BLOG/"/>
    
      <category term="HEXO" scheme="http://taejin0323.github.io/categories/BLOG/HEXO/"/>
    
    
      <category term="hexo" scheme="http://taejin0323.github.io/tags/hexo/"/>
    
      <category term="plugins" scheme="http://taejin0323.github.io/tags/plugins/"/>
    
      <category term="헥소" scheme="http://taejin0323.github.io/tags/%ED%97%A5%EC%86%8C/"/>
    
      <category term="플러그인" scheme="http://taejin0323.github.io/tags/%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8/"/>
    
  </entry>
  
  <entry>
    <title>Spring 개요</title>
    <link href="http://taejin0323.github.io/2019/01/22/spring/"/>
    <id>http://taejin0323.github.io/2019/01/22/spring/</id>
    <published>2019-01-22T08:30:00.000Z</published>
    <updated>2019-02-02T07:21:33.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>가장 좋은 문서는 <a href="http://spring.io" target="_blank" rel="noopener">spring.io</a> 공식 홈페이지에서 제공하는 documents 입니다. 개인적으로 공부하면서 작성하는 문서라 틀린 부분이 있을 수 있으니, 반드시 공식 문서를 참조하시기 바랍니다.</p><blockquote><p><a href="https://spring.io" target="_blank" rel="noopener">스프링 공식 홈페이지</a><br><a href="https://github.com/spring-projects" target="_blank" rel="noopener">소스코드</a><br><a href="https://spring.io/guides" target="_blank" rel="noopener">가이드</a></p></blockquote></blockquote><p>📖<strong>목차</strong>📖</p><ol><li><a href="#1-%EC%8A%A4%ED%94%84%EB%A7%81">스프링(Spring)</a></li><li><a href="#2-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EB%9E%80">스프링 프레임워크란</a></li></ol><hr><h3 id="1-스프링"><a class="markdownIt-Anchor" href="#1-스프링"></a> 1. 스프링</h3><p>공식 홈페이지 첫 화면을 보면 <u>Spring : the source for modern java</u> 라고 적혀있습니다.</p><p>이 문장만으로는 이해하기 어려워서 구글에 검색을 해도 우리나라에서는 스프링하면 <u>스프링 프레임워크(Spring framework)</u>를 주로 이야기해서 스프링의 정의에 대해 다루는 자료는 그렇게 많지 않았습니다.</p><p>그럼에도 스프링이란 무엇인지 명확하게 짚고 넘어가는 것이 좋을 것 같습니다.</p><p><strong>스프링(Spring)</strong> 은</p><div style="border:3px; border-style:dashed; color:grey; text-align:center">  <br>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크<br><br></div><p>라는 정의를 가지고 있습니다.</p><p>얼핏 보면 감이 잘 안 잡히기 때문에 시간을 내셔서 제가 참조했던 '12bme’님의 포스트<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 를 자세히 읽어보시고 이해하시면 좋을 것 같습니다.</p><p>또한 공식 홈페이지에 따르면 Spring 개발진의 철학이 Rod Johnson이 2002년 10월에 출판한 'Expert One-on-One J2EE Design and Develpment’에 요약되어 있다고 하니 여유가 있다면 한번 읽어보면 깊은 이해를 하는데 도움이 될 것 같습니다.</p><p>스프링 개발진의 <strong>목표(Aim)</strong> 로는,</p><ul><li>스프링은 사용하기 즐거워야 하고</li><li>여러분의 애플리케이션 코드가 스프링 API들에 의존해서는 안되며</li><li>JDO, Toplink, Hibernate와 같은 훌륭한 O/R mapping solution들과 경쟁하지 않지만, 통합을 촉진하는 것 입니다.</li></ul><p>또한 공식 홈페이지에서 <strong>PROJECTS</strong> 탭을 보면 스프링을 활용한 다양한 프로젝트들을 보실 수 있습니다.</p><ul><li>Spring Boot</li><li>Spring Framework</li><li>Spring Cloud</li><li>Etc …</li></ul><p>이처럼 스프링은 <u>어디서나 간단하고, 이식하기 쉬우며, 신속하고, 유연하게 JVM 기반의 시스템과 애플리케이션을 구축</u>할 수 있어  <mark>다양한 프로젝트들의 디자인이 되는 모듈</mark>이라고 생각할 수 있습니다.</p><h3 id="2-스프링-프레임워크란"><a class="markdownIt-Anchor" href="#2-스프링-프레임워크란"></a> 2. 스프링 프레임워크란</h3><p>위에서 언급한 12bme님의 포스트를 보셨으면 쉽게 이해하시겠지만, <em>엔터프라이즈 애플리케이션</em> 개발이 어려운 이유는 사회가 점점 복잡해지고, 시스템에서 다루어야 하는 업무의 복잡도와 의존도가 높아져 <u>개발의 복잡성이 증가</u>했기 때문입니다. 이에 사용자의 요구를 빠르고 안정적이면서 확장 가능한 형태로 유지가히 위한 로우레벨(Low level) 수준의 기술적 처리가 필요해졌고 우리는 스프링 프레임워크를 통해 쉽게 자바 엔터프라이즈 애플리케이션을 개발할 수 있게 되었습니다.</p><p><img src="/img/history.png" alt="history"></p><p>2004년 3월 Spring Framework 1.0 버전을 시작으로, 포스트 작성일 기준(2019년 1월) Spring Framework는 5.1.4 버전이 최신 버전입니다.</p><p>짧게 스프링(Spring)이라고 불리는 스프링 프레임워크는 <strong>모든 플랫폼에서 자바 기반 엔터프라이즈 애플리케이션(JAVA EE) 개발을 편하게 해주는 종합적인 프로그래밍 및 구성 모델을 제공</strong>합니다.</p><p>프레임워크의 바탕인 <em>스프링</em> 의 핵심 요소가 <u>애플리케이션 수준에서의 인프라 지원</u>이기 때문에 스프링 프레임워크에서는 개발 환경 구축에 필요한 하부구조(Infrastructure)를 포괄적으로 제공하고 처리하기 때문에 <u>개발자는 애플리케이션 개발(plumbing<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>)에 집중</u>할 수 있게 되었습니다.</p><p><img src="https://www.jbrothershi.com/wp-content/uploads/2018/10/SpringPlumbingLogo.png" alt="plumbing"></p><p>참고로 스프링 프레임워크는 대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자 정부 표준 프레임워크의 기반 기술입니다.</p><p><br><br><br></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://12bme.tistory.com/157" target="_blank" rel="noopener">스프링이란 무엇인가? - 12bme</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>원문에는 plumbing이라는 단어로 표현하는데, 프레임워크가 부품들 다 만들어 놓으면 개발자는 그것들을 조립하는 느낌이라 이런 단어를 사용한 것 같습니다. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;가장 좋은 문서는 &lt;a href=&quot;http://spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;spring.io&lt;/a&gt; 공식 홈페이지에서 제공하는 documents 입니다. 개인적으로 공부하면서 
      
    
    </summary>
    
      <category term="WEB" scheme="http://taejin0323.github.io/categories/WEB/"/>
    
      <category term="SPRING" scheme="http://taejin0323.github.io/categories/WEB/SPRING/"/>
    
    
      <category term="spring" scheme="http://taejin0323.github.io/tags/spring/"/>
    
      <category term="스프링" scheme="http://taejin0323.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>CDA 란?</title>
    <link href="http://taejin0323.github.io/2019/01/19/cda-tutorial/"/>
    <id>http://taejin0323.github.io/2019/01/19/cda-tutorial/</id>
    <published>2019-01-19T10:07:59.000Z</published>
    <updated>2019-01-29T09:25:45.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="related-post"><a class="markdownIt-Anchor" href="#related-post"></a> Related Post</h3><hr><blockquote><p>본 문서는 IHIS 연구소의 <strong>‘HL7 Clinical Document Architecture Release 2’</strong> pdf 문서를 기반으로 작성 되었습니다.</p></blockquote><hr><h1 id="cda-개요"><a class="markdownIt-Anchor" href="#cda-개요"></a> CDA 개요</h1><p><ul class="markdownIt-TOC"><li><ul><li><a href="#related-post">Related Post</a></li></ul></li><li><a href="#1-cda%EC%9D%98-%EC%A0%95%EC%9D%98definition">1.  CDA의 정의(Definition)</a></li><li><a href="#2-cda%EC%9D%98-%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%84%B1key-aspects">2. CDA의 주요 특성(Key aspects)</a></li><li><a href="#3-cda%EC%9D%98-%EB%AA%A9%ED%91%9C">3. CDA의 목표</a></li><li><a href="#4-cda-document%EC%9D%98-%EC%A3%BC%EC%9A%94-%EC%9A%94%EC%86%8C%EB%93%A4">4. CDA Document의 주요 요소들</a></li><li><a href="#5-cda-levels">5. CDA “levels”</a></li><li><a href="#6-%EB%B3%B4%EC%95%88%EC%84%B1-%EA%B8%B0%EA%B3%A0%EC%84%B1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AC%B4%EA%B2%BD%EC%84%B1">6. 보안성, 기고성, 데이터 무경성</a></li></ul></p><h2 id="1-cda의-정의definition"><a class="markdownIt-Anchor" href="#1-cda의-정의definition"></a> 1.  CDA의 정의(Definition)</h2><p>정식 명칭은 <span style="color:blue">The HL7 <strong>Clinical Document Architecture (CDA)</strong></span>로<br><strong>&quot;공유 목적으로 하는 임상 문서(clinical document)의 구조와 의미를 명시하는 문서 표기(Markup)의 표준&quot;</strong> 이라고 정의 되어있다.</p> <div style="font-size:small">임상문서는 의사가 환자를 진료 후 진단된 병명 및 진료내역 등을 기술하고 투약, 주요 실시검사 내용 등 주요 진료결과를 포함하는 문서이다.    <div style="border:1px solid; padding:10px; box-sizing: border-box;"><b>임상 문서(Clinical document)</b>는 <u>다음과 같은 특성</u>을 가진다 :        <pre>    - <strong>Persistence (존속성)</strong>    &emsp;- 문서는 지역 및 규제 요건에 의해 정의된 기간 동안 변경되지 않은 상태로 계속 존재한다.    - <strong>Stewardship (관리 책임)</strong>    &emsp;- 문서는  그 관리를 위임받은 기관에 의해 보존된다.    - <strong>Potential for authentication (인증가능성)</strong>    &emsp;- 문서는 합법적으로 인증받고자 하는 정보의 집합물이다.    - <strong>Context (문맥))</strong>    &emsp;- 임상 문서에 대한 기본 맥락(default context)를 설정한다.    - <strong>Wholeness (전체성)</strong>    &emsp;- 문서의 인증은 전체적으로 적용되며 문서 전체 맥락(context)이 없는 부분에는 적용되지 않는다.    - <strong>Human readability (가독성)</strong>    &emsp;- 사람이 읽을 수 있어야 한다.</pre>    </div> </div><h2 id="2-cda의-주요-특성key-aspects"><a class="markdownIt-Anchor" href="#2-cda의-주요-특성key-aspects"></a> 2. CDA의 주요 특성(Key aspects)</h2><ul><li><span style="color:green;">Extensible Markup Language <strong>(XML)</strong></span>로 인코딩 된다.</li><li><span style="color:green;">HL7 Reference Information Model(이하 RIM)</span>로부터 기계처리적 의미가 유도되고 <span style="color:green;">HL7의 버전 3 데이터 타입</span>을 사용한다</li><li>표현력이 풍부하고 유연하다.<ul><li><span style="color:green;">document 레벨, section 레벨, entry 레벨의 템플릿</span>은 일반적인 CDA 명세를 통제하기 위해 사용될 수 있다</li></ul></li></ul><h2 id="3-cda의-목표"><a class="markdownIt-Anchor" href="#3-cda의-목표"></a> 3. CDA의 목표</h2><ul><li>환자의 보호에 우선권을 둔다.</li><li>가능한 광범위한 시스템에서 사용이 가능하도록 하면서 비용이 효율적이게 구현한다.</li><li>전문 지식의 수준이 다른 사용자들도 판독이 가능하도록 지원한다.</li><li>인코딩된 정보가 오래 유지되도록 한다.</li><li>합리적이고 빠르게 디자인이 되도록 한다.</li></ul><h2 id="4-cda-document의-주요-요소들"><a class="markdownIt-Anchor" href="#4-cda-document의-주요-요소들"></a> 4. CDA Document의 주요 요소들</h2><p><img src="/img/componentsOfCDA.png" alt="CDA document"></p><ul><li><strong>The Header</strong><ul><li>&lt;ClinicalDocument&gt; 태그와 &lt;structuredBody&gt; 태그 사이에 있다</li><li>문서를 확인하고 분류하며 <mark>인증, 진료, 환자, 관련된 제공자들의 정보</mark>를 담는다.</li></ul></li><li><strong>The Body</strong><ul><li>진료 보고서(clinical report)를 담고 있다.</li><li>1)비정형화(unstructured blob) 또는,<br>2)정형화된 표기(structured markup) 둘 중 하나이다.</li><li>위 예제는 &lt;structuredBody&gt; 태그로 정형화된 구조이고, document section이 되풀이해서 올 수 있는 recursive 구조이다.</li></ul></li></ul><h2 id="5-cda-levels"><a class="markdownIt-Anchor" href="#5-cda-levels"></a> 5. CDA “levels”</h2><blockquote><p>PDF 문서에서 이 부분은 표 하나만 있어서 추가 자료 조사를 통해 작성하였습니다. 따라서 부족한 본인이 작성했기에 잘못된 내용이 있을 수도 있습니다.</p></blockquote><table>    <colgroup>    <col width="20%">        <col width="80%">    </colgroup>    <thead>    <tr>        <th>CDA, Release One</th>        <th>CDA, Release Two</th>    </tr>    </thead>    <tbody>    <tr>    <td>CDA Level One</td>        <td>The unconstrained CDA specification.        규제되지 않은 CDA 규정</td>    </tr>    <tr>    <td>CDA Level Two</td>        <td>The CDA specification with section-level templates applied.        색션 레벨의 템플릿을 적용한 CDA 규정</td>    </tr>    <tr>    <td>CDA Level Three</td>        <td>The CDA specification with entry-level (and optionally section-level) templates applied.            엔트리 레벨(선택적 색션 레벨) 템플릿을 적용한 CDA 규정</td>    </tr>    </tbody></table><ul><li><p>CDA는 2가지 버전이 있다</p><ul><li><p>첫 번째 버전(Release One)에서는 단순 CDA 설계의 목표를 달성하기 위한 <em>XML DTDs</em> 또는 <em>XML Schemas</em> 계층구조를 세 단계(level)로 나눈 것이다.<br><img src="http://iehr.eu/wp-content/uploads/2015/11/cda_levels.png" alt="CDA level"></p></li><li><p>두 번째 버전(Release Two)에서는 하나의 CDA XML Schema로 이루어지고, HL7 templates들을 계층적으로 적용해 나가는 구조이다.<br><img src="https://slideplayer.com/slide/3227951/11/images/18/CDA+Clinical+Document+Architecture+Document+Hierarchy.jpg" alt="CDA Release2"></p></li></ul></li></ul><h2 id="6-보안성-기고성-데이터-무경성"><a class="markdownIt-Anchor" href="#6-보안성-기고성-데이터-무경성"></a> 6. 보안성, 기고성, 데이터 무경성</h2><ul><li>CDA 문서를 보내고 받는 <u>애플리케이션 시스템</u>은<ul><li>문서 인증, 기밀 유지 및 보존에 대한 모든 법적 요구 사항을 충족해야한다.</li><li>대중 매체를 통한 통신의 경우, 송신자(source)/수신자(recipient) 인증 및 캡슐화(요약)된 문서의 안전한 전송을 취한 암호화 기술이 요구될 수 있으므로 표준의 범위를 벗어나는 상용 도구로 해결 해야한다.<br><br></li></ul></li><li><u>CDA</u>는<ul><li>애플리케이션 시스템이 중요한 데이터에 대한 접근을 관리하는데 도움이 되는 기밀성 상태 정보를 제공한다. 기밀성 상태(confidentiality status)는 전체 문서 또는 문서의 특정 부분에 적용될 수 있다.</li></ul></li></ul><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;related-post&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#related-post&quot;&gt;&lt;/a&gt; Related Post&lt;/h3&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;본 문서는 IHIS 연구소의 &lt;strong&gt;
      
    
    </summary>
    
      <category term="IHIS" scheme="http://taejin0323.github.io/categories/IHIS/"/>
    
      <category term="HL7" scheme="http://taejin0323.github.io/categories/IHIS/HL7/"/>
    
    
      <category term="HL7" scheme="http://taejin0323.github.io/tags/HL7/"/>
    
      <category term="cda" scheme="http://taejin0323.github.io/tags/cda/"/>
    
  </entry>
  
  <entry>
    <title>Markup? Markdown!</title>
    <link href="http://taejin0323.github.io/2019/01/17/markdown-basic/"/>
    <id>http://taejin0323.github.io/2019/01/17/markdown-basic/</id>
    <published>2019-01-17T07:31:42.000Z</published>
    <updated>2019-01-23T07:30:38.842Z</updated>
    
    <content type="html"><![CDATA[<p>Github Page를 시작 하면서 처음으로 Markdown 언어를 사용하게 되었습니다.<br>처음 웹 프로그래밍을 배울 때 HTML부터 배우면서 Hyper Text Markup Language(HTML)의 정확한 의미와 뜻은 알지 못한체 그저 태그로 구성된 문서(!)라는 정도로만 이해하고 넘겼습니다.</p><p>뜬금없이 HTML과 Markup에 대해 언급해서 의아하실 수 있지만, <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a>에 대한 위키피디아 정의를 보면 'Markdown is a lightweight markup language’라고 언급되어 있습니다.<br>여기서 HTML에 대한 정의를 깊게 이야기하진 않겠지만, 적어도 <strong>Markup</strong>은 무엇인지 알고 <strong>Markdown</strong>에 대해서 알아보도록 하겠습니다.</p><h2 id="markup-이란"><a class="markdownIt-Anchor" href="#markup-이란"></a> Markup 이란?</h2><p>'Markup’이란 단어는 비즈니스나 법률 등에도 다른 의미로 사용되는데, 프로그래밍에서는 쉽게 말해 <strong>어딘가에 표시를 해두는 것</strong>을 뜻합니다.<br>이해를 돕기 위해 예를 들어보겠습니다.</p><p>예 1) 표시가 없을 때</p><ul><li>HTML을 가르쳐드립니다 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다 19/01/17 세미나실</li></ul><p>예 2) 표시가 있을 때</p><ul><li>제목 : HTML을 가르쳐드립니다</li><li>내용 : 핵심 태그만 알면 당신도 HTML의 고수가 될 수 있습니다</li><li>날짜 : 19/01/17</li><li>장소 : 세미나실</li></ul><p>표시가 있음으로 단락(HTML에서는 Tag로 표현합니다)이 구분되고 직관적으로 이해하기도 쉬워졌습니다. 즉, <strong>Markup 언어를 사용하면 문서(text)를 구조적으로 표현할 수 있습니다.</strong></p><h2 id="markdown-이란"><a class="markdownIt-Anchor" href="#markdown-이란"></a> Markdown 이란?</h2><p><a href="https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4" target="_blank" rel="noopener">마크다운</a> 언어는 <strong>사람들이 읽기 쉽고 쓰기 쉬운 플레인 텍스트 포맷을 사용하여 쓸 수 있으면서 구조적으로 유효한 HTML로 선택적 변환이 가능하게 하는 것을 목표</strong>로 2004년 <a href="https://en.wikipedia.org/wiki/John_Gruber" target="_blank" rel="noopener">존 그루버</a>가 <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%9F%B0_%EC%8A%A4%EC%9B%8C%EC%B8%A0" target="_blank" rel="noopener">에런 스위츠</a>와 협업하여 만든 언어입니다.<br>특수기호와 문자를 이용하는 비교적 매우 간단한 문법 구조로 빠르게 컨텐츠를 작성할 수 있고 보다 직관적으로 이해할 수 있습니다.</p><p>이해를 돕기 위해 일상에서 자주 사용되는 예를 들어보겠습니다.</p><ul><li>SNS의 태그 기능 ex) 페이스북, 인스타그램</li><li>깃허브 <a href="http://README.md" target="_blank" rel="noopener">README.md</a> 등…</li></ul><p>맨 처음 언급한 위키피디아 내용처럼 마크다운 언어는 마크업 언어를 <strong>좀 더 직관적이고 간결하게 문서를 작성하게 해주는 언어</strong>입니다.</p><h2 id="마크다운의-장-단점"><a class="markdownIt-Anchor" href="#마크다운의-장-단점"></a> 마크다운의 장-단점</h2><h3 id="장점"><a class="markdownIt-Anchor" href="#장점"></a> 장점</h3><pre><code>1. 간결하다.2. 별도의 도구없이 작성가능하다.3. 다양한 형태로 변환이 가능하다.3. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.4. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.5. 지원하는 프로그램과 플랫폼이 다양하다.</code></pre><h3 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h3><pre><code>1. 표준이 없다.2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.3. 모든 HTML 마크업을 대신하지 못한다.</code></pre><h2 id="참조"><a class="markdownIt-Anchor" href="#참조"></a> 참조 :</h2><ul><li><a href="https://brunch.co.kr/@coveryou/14" target="_blank" rel="noopener">https://brunch.co.kr/@coveryou/14</a></li><li><a href="https://cordelia273.space/15" target="_blank" rel="noopener">https://cordelia273.space/15</a></li></ul><p><br><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Github Page를 시작 하면서 처음으로 Markdown 언어를 사용하게 되었습니다.&lt;br&gt;
처음 웹 프로그래밍을 배울 때 HTML부터 배우면서 Hyper Text Markup Language(HTML)의 정확한 의미와 뜻은 알지 못한체 그저
      
    
    </summary>
    
      <category term="BLOG" scheme="http://taejin0323.github.io/categories/BLOG/"/>
    
      <category term="MARKDOWN" scheme="http://taejin0323.github.io/categories/BLOG/MARKDOWN/"/>
    
    
      <category term="markup" scheme="http://taejin0323.github.io/tags/markup/"/>
    
      <category term="markdown" scheme="http://taejin0323.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
